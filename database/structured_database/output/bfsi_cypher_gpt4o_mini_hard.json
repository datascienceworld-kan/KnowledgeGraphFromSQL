[
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWITH c, SUM(a.account_balance) AS total_balance\nORDER BY total_balance DESC\nLIMIT 5\nRETURN c.customer_id, c.customer_name, total_balance",
    "cypher_time_llm_gen": 2.593134624999948,
    "cypher_answer": "[{'c.customer_id': 148, 'c.customer_name': 'Alice Peterson', 'total_balance': 352526.81}, {'c.customer_id': 170, 'c.customer_name': 'Mckenzie Price', 'total_balance': 305709.07}, {'c.customer_id': 133, 'c.customer_name': 'Robert Munoz', 'total_balance': 258007.55000000002}, {'c.customer_id': 9, 'c.customer_name': 'Tiffany Newton', 'total_balance': 255802.56}, {'c.customer_id': 16, 'c.customer_name': 'Jennifer Bryan', 'total_balance': 236325.27000000002}]",
    "cypher_time_exec": 0.023378500001854263,
    "id": "6841c300-5521-4c6a-a60b-27607be76a46",
    "query": "Find the top 5 customers with the highest total account balance across all their accounts."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits) \nWITH c.customer_id AS customer_id, SUM(l.balance) AS total_loan_balance, SUM(d.balance) AS total_deposit_balance \nRETURN customer_id, total_loan_balance, total_deposit_balance",
    "cypher_time_llm_gen": 4.850133874999301,
    "cypher_answer": "[{'customer_id': 165, 'total_loan_balance': -33418.34, 'total_deposit_balance': 18757.44}, {'customer_id': 33, 'total_loan_balance': -8921.58, 'total_deposit_balance': 11013.12}, {'customer_id': 153, 'total_loan_balance': -83312.62, 'total_deposit_balance': 76795.81999999999}, {'customer_id': 179, 'total_loan_balance': -48270.99, 'total_deposit_balance': 82965.39}, {'customer_id': 36, 'total_loan_balance': -97676.54, 'total_deposit_balance': 72721.28}, {'customer_id': 14, 'total_loan_balance': -42527.48, 'total_deposit_balance': 12898.26}, {'customer_id': 100, 'total_loan_balance': -10379.45, 'total_deposit_balance': 86707.66}, {'customer_id': 3, 'total_loan_balance': -197454.84, 'total_deposit_balance': 120081.06999999999}, {'customer_id': 28, 'total_loan_balance': -435168.92, 'total_deposit_balance': 386558.8400000001}, {'customer_id': 80, 'total_loan_balance': -213555.31999999998, 'total_deposit_balance': 197087.31}, {'customer_id': 188, 'total_loan_balance': -183177.06, 'total_deposit_balance': 138715.71}, {'customer_id': 128, 'total_loan_balance': -8913.03, 'total_deposit_balance': 40090.68}, {'customer_id': 164, 'total_loan_balance': -40435.770000000004, 'total_deposit_balance': 64310.7}, {'customer_id': 148, 'total_loan_balance': -25250.52, 'total_deposit_balance': 65610.61}, {'customer_id': 197, 'total_loan_balance': -32929.5, 'total_deposit_balance': 31647.48}, {'customer_id': 184, 'total_loan_balance': -51990.86, 'total_deposit_balance': 43384.74}, {'customer_id': 82, 'total_loan_balance': -18081.48, 'total_deposit_balance': 60665.6}, {'customer_id': 23, 'total_loan_balance': -75966.74, 'total_deposit_balance': 62127.3}, {'customer_id': 55, 'total_loan_balance': -23282.42, 'total_deposit_balance': 31928.83}, {'customer_id': 62, 'total_loan_balance': -36949.88, 'total_deposit_balance': 45978.96}, {'customer_id': 95, 'total_loan_balance': -47490.73, 'total_deposit_balance': 24439.7}, {'customer_id': 132, 'total_loan_balance': -91574.1, 'total_deposit_balance': 63390.51}, {'customer_id': 50, 'total_loan_balance': -61344.18, 'total_deposit_balance': 32026.73}, {'customer_id': 70, 'total_loan_balance': -71421.88, 'total_deposit_balance': 43377.24}, {'customer_id': 116, 'total_loan_balance': -25379.9, 'total_deposit_balance': 3546.64}, {'customer_id': 142, 'total_loan_balance': -41978.26, 'total_deposit_balance': 48498.049999999996}, {'customer_id': 8, 'total_loan_balance': -25789.99, 'total_deposit_balance': 34214.95}, {'customer_id': 73, 'total_loan_balance': -94495.8, 'total_deposit_balance': 29335.64}, {'customer_id': 69, 'total_loan_balance': -283143.80000000005, 'total_deposit_balance': 271298.63999999996}, {'customer_id': 127, 'total_loan_balance': -28746.96, 'total_deposit_balance': 71982.27}, {'customer_id': 183, 'total_loan_balance': -43526.6, 'total_deposit_balance': 2165.13}, {'customer_id': 117, 'total_loan_balance': -72918.78, 'total_deposit_balance': 136650.86}, {'customer_id': 168, 'total_loan_balance': -147040.52, 'total_deposit_balance': 41326.68}, {'customer_id': 98, 'total_loan_balance': -27487.59, 'total_deposit_balance': 17773.83}, {'customer_id': 111, 'total_loan_balance': -33319.69, 'total_deposit_balance': 30988.72}, {'customer_id': 44, 'total_loan_balance': -25019.41, 'total_deposit_balance': 97915.22}, {'customer_id': 181, 'total_loan_balance': -112641.90000000001, 'total_deposit_balance': 51781.340000000004}, {'customer_id': 90, 'total_loan_balance': -7784.44, 'total_deposit_balance': 46934.58}, {'customer_id': 68, 'total_loan_balance': -71270.28, 'total_deposit_balance': 59226.409999999996}, {'customer_id': 121, 'total_loan_balance': -75433.63, 'total_deposit_balance': 121882.38}, {'customer_id': 61, 'total_loan_balance': -48896.0, 'total_deposit_balance': 45737.21}, {'customer_id': 76, 'total_loan_balance': -35438.11, 'total_deposit_balance': 90736.66}, {'customer_id': 71, 'total_loan_balance': -110749.08, 'total_deposit_balance': 119337.28}, {'customer_id': 170, 'total_loan_balance': -29640.48, 'total_deposit_balance': 82395.48}, {'customer_id': 94, 'total_loan_balance': -3149.91, 'total_deposit_balance': 41842.75}, {'customer_id': 66, 'total_loan_balance': -127534.53, 'total_deposit_balance': 141753.46000000002}, {'customer_id': 107, 'total_loan_balance': -63313.36, 'total_deposit_balance': 7747.18}, {'customer_id': 38, 'total_loan_balance': -62705.88, 'total_deposit_balance': 50963.119999999995}, {'customer_id': 96, 'total_loan_balance': -70467.53, 'total_deposit_balance': 104889.45000000001}, {'customer_id': 18, 'total_loan_balance': -37592.64, 'total_deposit_balance': 84088.84}, {'customer_id': 123, 'total_loan_balance': -13683.7, 'total_deposit_balance': 49085.66}, {'customer_id': 60, 'total_loan_balance': -33853.88, 'total_deposit_balance': 28564.8}, {'customer_id': 83, 'total_loan_balance': -47947.93, 'total_deposit_balance': 41498.03}, {'customer_id': 143, 'total_loan_balance': -108837.96, 'total_deposit_balance': 98950.98000000003}, {'customer_id': 193, 'total_loan_balance': -85574.9, 'total_deposit_balance': 71270.98999999999}, {'customer_id': 4, 'total_loan_balance': -143678.4, 'total_deposit_balance': 172715.1}, {'customer_id': 9, 'total_loan_balance': -4262.0, 'total_deposit_balance': 32777.67}, {'customer_id': 78, 'total_loan_balance': -2836.62, 'total_deposit_balance': 63767.5}, {'customer_id': 137, 'total_loan_balance': -926.83, 'total_deposit_balance': 44984.09}, {'customer_id': 51, 'total_loan_balance': -79076.42000000001, 'total_deposit_balance': 49591.86000000001}, {'customer_id': 180, 'total_loan_balance': -195877.9, 'total_deposit_balance': 253078.76999999996}, {'customer_id': 120, 'total_loan_balance': -122452.75, 'total_deposit_balance': 37221.479999999996}, {'customer_id': 156, 'total_loan_balance': -25982.95, 'total_deposit_balance': 41974.08}, {'customer_id': 103, 'total_loan_balance': -34537.34, 'total_deposit_balance': 44812.47}, {'customer_id': 198, 'total_loan_balance': -71035.87, 'total_deposit_balance': 126525.90000000001}, {'customer_id': 52, 'total_loan_balance': -242784.41999999998, 'total_deposit_balance': 33741.44}, {'customer_id': 149, 'total_loan_balance': -9078.69, 'total_deposit_balance': 43088.78}, {'customer_id': 59, 'total_loan_balance': -80477.0, 'total_deposit_balance': 18448.08}, {'customer_id': 72, 'total_loan_balance': -8910.68, 'total_deposit_balance': 17142.65}, {'customer_id': 48, 'total_loan_balance': -48869.26, 'total_deposit_balance': 11401.04}, {'customer_id': 150, 'total_loan_balance': -90798.98, 'total_deposit_balance': 53522.64}, {'customer_id': 162, 'total_loan_balance': -119148.91, 'total_deposit_balance': 67145.4}, {'customer_id': 45, 'total_loan_balance': -18700.9, 'total_deposit_balance': 10283.51}, {'customer_id': 63, 'total_loan_balance': -43147.36, 'total_deposit_balance': 28080.56}, {'customer_id': 101, 'total_loan_balance': -18267.8, 'total_deposit_balance': 18794.6}, {'customer_id': 11, 'total_loan_balance': -60415.649999999994, 'total_deposit_balance': 65979.38}, {'customer_id': 19, 'total_loan_balance': -75354.06, 'total_deposit_balance': 15410.48}, {'customer_id': 146, 'total_loan_balance': -37044.95, 'total_deposit_balance': 46321.36}, {'customer_id': 109, 'total_loan_balance': -15331.15, 'total_deposit_balance': 11888.28}, {'customer_id': 155, 'total_loan_balance': -65155.28, 'total_deposit_balance': 68296.16}, {'customer_id': 176, 'total_loan_balance': -25108.04, 'total_deposit_balance': 34566.28}, {'customer_id': 154, 'total_loan_balance': -28576.14, 'total_deposit_balance': 21431.52}, {'customer_id': 47, 'total_loan_balance': -27540.92, 'total_deposit_balance': 32950.58}, {'customer_id': 35, 'total_loan_balance': -40678.94, 'total_deposit_balance': 42392.46}, {'customer_id': 49, 'total_loan_balance': -47649.979999999996, 'total_deposit_balance': 83939.34}, {'customer_id': 42, 'total_loan_balance': -138307.4, 'total_deposit_balance': 8069.26}, {'customer_id': 22, 'total_loan_balance': -6173.81, 'total_deposit_balance': 36332.33}, {'customer_id': 174, 'total_loan_balance': -18678.64, 'total_deposit_balance': 37943.54}, {'customer_id': 158, 'total_loan_balance': -16726.800000000003, 'total_deposit_balance': 6427.78}, {'customer_id': 6, 'total_loan_balance': -34403.96, 'total_deposit_balance': 86516.84}]",
    "cypher_time_exec": 0.02309275000152411,
    "query": "Retrieve customers who have both loans and deposits, listing their total loan balance and total deposit balance.",
    "id": "980f382a-ff1b-4dd4-a16d-0243a0dba7ba"
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts) \nWITH b.branch_id AS BranchID, \n     COUNT(DISTINCT c.customer_id) AS NumberOfCustomers, \n     COUNT(DISTINCT a.account_id) AS NumberOfAccounts, \n     SUM(a.account_balance) AS TotalBalance \nRETURN BranchID, NumberOfCustomers, NumberOfAccounts, TotalBalance",
    "cypher_time_llm_gen": 4.596944124998117,
    "cypher_answer": "[{'BranchID': 1, 'NumberOfCustomers': 45, 'NumberOfAccounts': 84, 'TotalBalance': 3728911.44}, {'BranchID': 2, 'NumberOfCustomers': 36, 'NumberOfAccounts': 81, 'TotalBalance': 3957402.3900000015}, {'BranchID': 3, 'NumberOfCustomers': 28, 'NumberOfAccounts': 48, 'TotalBalance': 2198433.26}, {'BranchID': 4, 'NumberOfCustomers': 45, 'NumberOfAccounts': 87, 'TotalBalance': 3911293.3999999994}]",
    "cypher_time_exec": 0.013597124998341314,
    "query": "List all branches with the number of customers, number of accounts, and total balance across accounts.",
    "id": "53bffb4d-841a-4d55-8664-2114b4089b35"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, SUM(d.balance) AS totalDeposits, SUM(l.balance) AS totalLoans\nWHERE totalDeposits > 2 * totalLoans\nRETURN c",
    "cypher_time_llm_gen": 2.5463089579934604,
    "cypher_answer": "[{'c': {'address': '6879 Peterson Prairie Suite 165\\nKimberlyville, MD 76971', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-746-442-8531x9744', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1979, 12, 3), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Valerie Salas', 'customer_id': 18, 'email': 'timothy87@example.org'}}, {'c': {'address': '85208 Cole Parkways Apt. 201\\nTimothyport, MA 62543', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '274-517-6128x922', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1961, 5, 18), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sheri Roberts', 'customer_id': 183, 'email': 'coxmelissa@example.org'}}, {'c': {'address': '1694 Ashley Pike Suite 747\\nPort Jacqueline, OH 38447', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '520.409.9694', 'date_of_birth': neo4j.time.Date(1961, 10, 21), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Christopher Brown', 'customer_id': 174, 'email': 'felicia26@example.net'}}, {'c': {'address': '89997 Carol Fall\\nNataliemouth, WV 18382', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '944.947.1946x139', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1974, 9, 18), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Brenda Lee', 'customer_id': 76, 'email': 'halljustin@example.com'}}, {'c': {'address': '57187 Brown Causeway\\nNorth Matthew, KS 97353', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '309.567.4404x6352', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1972, 5, 13), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jason Williams', 'customer_id': 94, 'email': 'wandawilliams@example.com'}}, {'c': {'address': '195 Glass Point\\nNorth Tammyburgh, AR 56101', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '920-718-8924', 'date_of_birth': neo4j.time.Date(1979, 10, 23), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'John Salas', 'customer_id': 198, 'email': 'joneshaley@example.net'}}, {'c': {'address': '78833 Ashley Loop\\nWest Amytown, AZ 88598', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-951-790-3115x4618', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1972, 2, 7), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Xavier Garcia', 'customer_id': 63, 'email': 'samanthadouglas@example.org'}}, {'c': {'address': '3948 Robert Skyway\\nJoshuatown, OH 84700', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-534-554-9944x13986', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1965, 10, 26), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Trevor Hernandez', 'customer_id': 28, 'email': 'carlosstanley@example.net'}}, {'c': {'address': '3520 Edwin Squares\\nEast Paulmouth, OK 47961', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '882.847.9841', 'date_of_birth': neo4j.time.Date(1997, 1, 24), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Angela Carpenter', 'customer_id': 70, 'email': 'rodriguezperry@example.net'}}, {'c': {'address': '962 Shannon Radial Suite 943\\nLake Brian, MI 63233', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '8156356052', 'date_of_birth': neo4j.time.Date(1995, 8, 13), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Regina Patel', 'customer_id': 150, 'email': 'kimberly83@example.com'}}, {'c': {'address': '9311 Brian Lodge\\nSouth Bryanborough, SC 33666', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '972-681-1432x5675', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1961, 12, 20), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Tonya Richards', 'customer_id': 111, 'email': 'howardjones@example.com'}}, {'c': {'address': '8838 Michael Islands\\nWest Bryan, NY 59920', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-508-387-8957x38712', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1989, 10, 22), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Lisa Hurley', 'customer_id': 42, 'email': 'michaelhardy@example.net'}}, {'c': {'address': '79254 Rice Trail Suite 531\\nMyersport, AS 55090', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(599)299-0998x031', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1994, 8, 16), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Dr. Jennifer Allen', 'customer_id': 59, 'email': 'seanjones@example.com'}}, {'c': {'address': '7716 Nelson Shores Apt. 328\\nEast Matthewtown, PR 27319', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-689-649-8379x2067', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1964, 7, 31), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Emily Greene', 'customer_id': 52, 'email': 'lfields@example.org'}}, {'c': {'address': '8398 Barr Ramp\\nNorth Alison, CA 90601', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-359-707-6722x172', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1996, 9, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sarah Collins', 'customer_id': 80, 'email': 'michelle53@example.net'}}, {'c': {'address': '198 Jamie Ville\\nClintonmouth, PA 94755', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '743.362.1996', 'date_of_birth': neo4j.time.Date(1977, 8, 2), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Tina Carpenter', 'customer_id': 71, 'email': 'charles68@example.com'}}, {'c': {'address': '190 Strickland Camp Apt. 092\\nLucasborough, FM 36946', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-274-979-2500x550', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1964, 6, 20), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michaela Ellis', 'customer_id': 188, 'email': 'ronald51@example.org'}}, {'c': {'address': '692 Brandi Loop Apt. 658\\nPort Crystalview, WA 13365', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-982-737-8977x679', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(2002, 3, 24), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Rhonda Mcdonald', 'customer_id': 128, 'email': 'cohensusan@example.com'}}, {'c': {'address': '72594 Scott Trail\\nPort Douglasborough, MI 06585', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '899-348-8337x767', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1992, 9, 30), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Joseph Nelson', 'customer_id': 116, 'email': 'clarkamber@example.org'}}, {'c': {'address': '981 Yang Ridge\\nNathanielhaven, OR 43610', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(860)547-2850x2469', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1990, 6, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Karen Long', 'customer_id': 120, 'email': 'toddjason@example.net'}}, {'c': {'address': '421 Paul Cove Suite 844\\nNew Cherylborough, WI 49011', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '869-567-1853x50924', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1993, 8, 18), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michael Fields', 'customer_id': 103, 'email': 'rodriguezmary@example.com'}}, {'c': {'address': '0220 Harrison Port Apt. 414\\nLisaborough, WY 02405', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '838.899.7441x364', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1978, 4, 3), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Scott Schmidt', 'customer_id': 165, 'email': 'cassandra33@example.com'}}, {'c': {'address': '8146 Johnson Roads Suite 564\\nPort Manuel, NE 38723', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '001-238-868-5625', 'date_of_birth': neo4j.time.Date(1977, 12, 17), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'James Williams', 'customer_id': 14, 'email': 'brianmyers@example.org'}}, {'c': {'address': '23324 Welch Centers Apt. 592\\nWest Jacob, TN 15981', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '(635)754-7099', 'date_of_birth': neo4j.time.Date(1969, 6, 29), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kelly Fowler', 'customer_id': 45, 'email': 'jorge66@example.net'}}, {'c': {'address': '060 Patricia Cape Apt. 408\\nSethport, SD 45020', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(621)731-7805x1706', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1962, 12, 27), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Angela Miller', 'customer_id': 96, 'email': 'karen14@example.net'}}, {'c': {'address': '764 Jimenez Expressway Apt. 157\\nRobertborough, GA 06782', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '(737)687-8336', 'date_of_birth': neo4j.time.Date(1965, 2, 7), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michael Moore', 'customer_id': 68, 'email': 'walshjared@example.net'}}, {'c': {'address': '23533 Smith Islands Suite 429\\nSmithchester, CT 07386', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '410-607-0118x320', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(2003, 5, 9), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Mary Burke', 'customer_id': 61, 'email': 'montgomeryjames@example.net'}}, {'c': {'address': '54442 Michaela Path Suite 343\\nVelasquezport, FL 56921', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '(811)660-7530', 'date_of_birth': neo4j.time.Date(1955, 9, 13), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Elizabeth Fisher', 'customer_id': 4, 'email': 'isaac56@example.org'}}, {'c': {'address': '43052 Charles Trace\\nSouth Troyfurt, ME 56723', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '(995)721-8215', 'date_of_birth': neo4j.time.Date(1988, 4, 29), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Robert Miles', 'customer_id': 11, 'email': 'elizabeth38@example.com'}}, {'c': {'address': '39845 Saunders Ridge\\nSouth Davidshire, ID 52716', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '7186826541', 'date_of_birth': neo4j.time.Date(1958, 11, 10), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Maria Horton', 'customer_id': 168, 'email': 'sandybeltran@example.org'}}, {'c': {'address': '4760 Wayne Knolls\\nNew Ryan, CA 50826', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '995-802-8538x16384', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1996, 12, 23), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kyle Butler', 'customer_id': 101, 'email': 'priceisaiah@example.org'}}, {'c': {'address': '0332 Carter Junction Suite 609\\nLake Ryan, WY 68616', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '568.289.3322', 'date_of_birth': neo4j.time.Date(1977, 1, 28), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Joann Perez MD', 'customer_id': 62, 'email': 'elizabethsparks@example.com'}}, {'c': {'address': '3903 Morgan Park\\nStevenfort, AK 77785', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-321-736-3061x1013', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1986, 9, 2), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Dustin Jackson', 'customer_id': 69, 'email': 'thomaskara@example.com'}}, {'c': {'address': '30367 Figueroa Squares\\nThomasborough, LA 28938', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-325-451-0810x958', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1991, 4, 20), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jeremy Gonzales', 'customer_id': 132, 'email': 'stoutmiranda@example.net'}}, {'c': {'address': '229 Mann Junctions Suite 351\\nEast Stephen, AZ 09985', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '(747)337-3196', 'date_of_birth': neo4j.time.Date(2001, 3, 9), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sarah Garcia', 'customer_id': 100, 'email': 'dwayne63@example.net'}}, {'c': {'address': '046 Cummings Plain\\nMichaelfurt, NH 18000', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-430-882-0198x461', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1997, 4, 5), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Carmen Lara', 'customer_id': 184, 'email': 'stevengillespie@example.com'}}, {'c': {'address': 'Unit 7756 Box 3467\\nDPO AA 73732', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '2484280847', 'date_of_birth': neo4j.time.Date(2001, 11, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Paul Cook', 'customer_id': 156, 'email': 'megan44@example.org'}}, {'c': {'address': '0989 Willis Stream Suite 058\\nNorth Sheilachester, VT 94440', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '(623)344-4145', 'date_of_birth': neo4j.time.Date(1974, 6, 28), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sara Sexton', 'customer_id': 19, 'email': 'oconnorelizabeth@example.org'}}, {'c': {'address': '16166 Heather Shore\\nSouth Jason, MI 33050', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '001-852-848-4481', 'date_of_birth': neo4j.time.Date(1989, 7, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'John Park', 'customer_id': 72, 'email': 'david70@example.com'}}, {'c': {'address': '91932 Moore Groves Suite 523\\nSouth Gina, PW 80889', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '961-782-0608', 'date_of_birth': neo4j.time.Date(2002, 6, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Nicholas Long', 'customer_id': 121, 'email': 'campbellholly@example.com'}}, {'c': {'address': '19282 Linda Highway Apt. 527\\nSouth Amandafort, NM 34254', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-714-655-3510x2315', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1986, 10, 23), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jerry Bradford', 'customer_id': 50, 'email': 'angelabaldwin@example.org'}}, {'c': {'address': '944 Lisa Circles\\nNashmouth, UT 72725', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(795)685-6802x42791', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1978, 9, 3), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Lori Cooper DVM', 'customer_id': 180, 'email': 'michael32@example.com'}}, {'c': {'address': '0307 Aaron Island\\nNorth Amandaport, AR 30657', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '958.985.7150', 'date_of_birth': neo4j.time.Date(1983, 8, 31), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Mathew Sutton', 'customer_id': 158, 'email': 'rodriguezcrystal@example.com'}}, {'c': {'address': '6144 Brown Estates Suite 798\\nPatriciaview, IA 56892', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '747-818-4265', 'date_of_birth': neo4j.time.Date(1980, 1, 30), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Glenn Kim', 'customer_id': 23, 'email': 'stonetommy@example.org'}}, {'c': {'address': '018 Chen Vista Apt. 077\\nLake Sierra, VI 19115', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-262-605-5044x06882', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1994, 7, 4), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Joseph Anderson', 'customer_id': 127, 'email': 'fpowell@example.com'}}, {'c': {'address': 'PSC 8093, Box 0599\\nAPO AE 90958', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '001-209-502-8538', 'date_of_birth': neo4j.time.Date(2003, 7, 24), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Mckenzie Price', 'customer_id': 170, 'email': 'aaronmoss@example.com'}}, {'c': {'address': '4991 Vega Walks\\nSaraborough, HI 02453', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-284-345-0502x82256', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1960, 9, 26), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Carl Adams', 'customer_id': 83, 'email': 'zcain@example.net'}}, {'c': {'address': '8636 Kelley Circle Apt. 752\\nWallsside, NV 14073', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-306-275-1775x39052', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1958, 10, 17), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Desiree Hernandez', 'customer_id': 143, 'email': 'tanderson@example.net'}}, {'c': {'address': '60028 Walker Burg Suite 159\\nWest Lesliestad, MD 80763', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(248)508-9773x090', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1985, 10, 24), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Donald Stewart', 'customer_id': 51, 'email': 'jennifercolon@example.org'}}, {'c': {'address': '7644 Thomas Track\\nGomezville, IN 96384', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '236.572.9572', 'date_of_birth': neo4j.time.Date(1978, 5, 29), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Dawn Richard', 'customer_id': 44, 'email': 'brownrebecca@example.com'}}, {'c': {'address': 'Unit 4955 Box 1681\\nDPO AE 41793', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-696-650-5792x642', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1973, 7, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Pamela Jackson', 'customer_id': 107, 'email': 'mary75@example.net'}}, {'c': {'address': '4576 Ward Radial\\nRogerchester, NC 82052', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-743-559-6798x842', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1985, 2, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'William Sandoval', 'customer_id': 155, 'email': 'carterlisa@example.net'}}, {'c': {'address': '1594 Wolf Fields\\nCollinsstad, VA 33186', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-958-705-6105x795', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1959, 2, 2), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Annette Thomas', 'customer_id': 146, 'email': 'francisamy@example.org'}}, {'c': {'address': '5186 Mendez Walks Apt. 003\\nEast Heatherview, MS 97890', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '208.830.9237', 'date_of_birth': neo4j.time.Date(1958, 7, 16), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michelle Yang', 'customer_id': 98, 'email': 'brendatodd@example.net'}}, {'c': {'address': '8796 Sandra Port\\nCameronberg, ND 97931', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '529.843.9579x81121', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1991, 1, 22), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Karen Gonzalez', 'customer_id': 109, 'email': 'hubernicholas@example.com'}}, {'c': {'address': '20824 Pena Street\\nPort Calvin, CO 60263', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '844-754-0297x63535', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1969, 3, 19), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Hannah Scott', 'customer_id': 137, 'email': 'michael02@example.org'}}, {'c': {'address': '12202 Sheri Key Suite 439\\nLyonsmouth, DC 24690', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-915-549-4792x978', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(2002, 3, 15), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Ronald Santiago', 'customer_id': 162, 'email': 'bjohnson@example.org'}}, {'c': {'address': '294 Tammy Bridge Apt. 736\\nNew Amy, OH 71171', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '(289)569-7097', 'date_of_birth': neo4j.time.Date(1974, 3, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jon Wilson', 'customer_id': 164, 'email': 'torrescarlos@example.net'}}, {'c': {'address': '410 Brittany Meadow Apt. 803\\nPort Tracey, NE 84001', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(829)313-1571x0310', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(2004, 1, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Shannon Moore', 'customer_id': 117, 'email': 'pwashington@example.net'}}, {'c': {'address': '3570 Sandra Heights\\nEast Paulaberg, FL 64142', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(766)926-7258x6489', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1999, 11, 1), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Hayley Vasquez', 'customer_id': 8, 'email': 'markprice@example.net'}}, {'c': {'address': '144 Schmidt Green Apt. 880\\nMorganfort, RI 62227', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '3539324184', 'date_of_birth': neo4j.time.Date(1957, 8, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Anthony Mendez', 'customer_id': 78, 'email': 'keith07@example.net'}}, {'c': {'address': '939 Wolfe Ridges\\nNorth Nancy, GA 75763', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '956.507.9167', 'date_of_birth': neo4j.time.Date(1974, 4, 11), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michael Patel', 'customer_id': 47, 'email': 'calderonheather@example.org'}}, {'c': {'address': '44147 Jeremy Summit Suite 988\\nNorth Margaretport, AS 57247', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '344.312.2773', 'date_of_birth': neo4j.time.Date(2006, 2, 28), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Joseph Kelly', 'customer_id': 193, 'email': 'mcdonaldkelly@example.org'}}, {'c': {'address': '1229 Blair Fields\\nTrevinoton, MP 69258', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '588.572.0891', 'date_of_birth': neo4j.time.Date(1997, 1, 24), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Nicole Green', 'customer_id': 48, 'email': 'nnunez@example.org'}}, {'c': {'address': '3727 Bryant Stravenue Suite 908\\nFrenchport, GA 13681', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(848)353-4173x65557', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(2002, 10, 21), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Bradley Butler', 'customer_id': 82, 'email': 'leonardrichard@example.com'}}, {'c': {'address': '8850 Smith Mountain\\nJeffreyside, CO 21586', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(592)548-8150x69160', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(2007, 1, 23), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Anthony Cox', 'customer_id': 3, 'email': 'ophillips@example.net'}}, {'c': {'address': '9060 Morgan Summit Apt. 067\\nPort Davidville, IA 34926', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '227-297-6359', 'date_of_birth': neo4j.time.Date(1965, 8, 28), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jennifer Perry', 'customer_id': 142, 'email': 'xwalters@example.org'}}, {'c': {'address': '612 Erin Estate Apt. 770\\nOconnellmouth, VA 03527', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '345.255.3853x6764', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1968, 2, 9), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Andrew Clay', 'customer_id': 6, 'email': 'johnwoods@example.net'}}, {'c': {'address': '104 Smith Stravenue\\nTurnertown, NC 70483', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '(627)363-0700', 'date_of_birth': neo4j.time.Date(1987, 12, 7), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Margaret Whitney', 'customer_id': 176, 'email': 'morganwilliams@example.net'}}, {'c': {'address': '99294 Hernandez Plaza\\nBrownville, CT 50412', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '589-858-8864x2363', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1992, 12, 2), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Alice Peterson', 'customer_id': 148, 'email': 'adamsjeffrey@example.com'}}, {'c': {'address': '9868 George Square Apt. 680\\nLake Brendachester, KY 51732', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '465-310-2349x709', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(2001, 7, 8), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Alan Thompson', 'customer_id': 179, 'email': 'marystrickland@example.net'}}, {'c': {'address': '2449 Scott Prairie Apt. 184\\nChambersview, OR 96280', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-642-999-5517x41085', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1973, 3, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Cheryl Snow', 'customer_id': 181, 'email': 'contrerascorey@example.net'}}, {'c': {'address': 'Unit 6549 Box 4301\\nDPO AE 07959', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-685-409-8018x996', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(2005, 4, 1), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Tiffany Newton', 'customer_id': 9, 'email': 'virginiacooper@example.com'}}, {'c': {'address': '6141 Meza Roads\\nNorth Mary, AR 80510', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '946.330.7950', 'date_of_birth': neo4j.time.Date(1994, 1, 11), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michelle Smith', 'customer_id': 49, 'email': 'irivera@example.org'}}, {'c': {'address': '578 Beth Gardens\\nNew Heidi, WV 86492', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-460-501-9845x98730', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1955, 11, 19), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Larry Lawson', 'customer_id': 38, 'email': 'hrich@example.com'}}, {'c': {'address': 'PSC 0468, Box 2001\\nAPO AE 08491', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '485-487-3494', 'date_of_birth': neo4j.time.Date(1995, 11, 26), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'John Wright', 'customer_id': 153, 'email': 'glee@example.org'}}, {'c': {'address': 'USCGC Smith\\nFPO AE 47229', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '(389)441-2278', 'date_of_birth': neo4j.time.Date(1996, 4, 27), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Katherine Morris', 'customer_id': 66, 'email': 'atkinsonjonathan@example.com'}}, {'c': {'address': '672 Larson Squares\\nLake Billyfurt, NJ 13373', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '391.427.3601', 'date_of_birth': neo4j.time.Date(1997, 5, 5), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jennifer Cunningham', 'customer_id': 33, 'email': 'wmack@example.com'}}, {'c': {'address': '984 Beard Walk\\nPort Julie, DE 06985', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '7533908538', 'date_of_birth': neo4j.time.Date(1959, 4, 1), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sarah Turner', 'customer_id': 73, 'email': 'kayla73@example.com'}}, {'c': {'address': '95807 Mercado Summit Apt. 142\\nLake Phyllis, AK 39261', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '971-642-2325x5652', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1990, 8, 5), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Blake Aguilar', 'customer_id': 90, 'email': 'rwillis@example.com'}}, {'c': {'address': '258 Davis Creek Apt. 332\\nSouth Beth, NH 33052', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '826.442.5049x70393', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1999, 8, 5), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sarah Roberts', 'customer_id': 60, 'email': 'hannah98@example.net'}}, {'c': {'address': '98245 Dawn Loaf Suite 115\\nStanleystad, NV 85433', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '953.407.7776x47069', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(2001, 5, 13), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'James Green', 'customer_id': 123, 'email': 'trivers@example.org'}}, {'c': {'address': '041 Hernandez Lakes Apt. 744\\nHartmanborough, WY 38555', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '3773821747', 'date_of_birth': neo4j.time.Date(1990, 6, 16), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'John Woods', 'customer_id': 95, 'email': 'humphreyralph@example.net'}}, {'c': {'address': '5886 Smith Throughway\\nPort Luke, OK 87609', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '001-497-601-5034', 'date_of_birth': neo4j.time.Date(1990, 5, 29), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kathryn Jones', 'customer_id': 22, 'email': 'johnyates@example.net'}}, {'c': {'address': '28266 Kristin Camp\\nWest Katrinaland, AS 34646', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '889.448.7173', 'date_of_birth': neo4j.time.Date(1975, 12, 27), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Leslie Vang', 'customer_id': 35, 'email': 'fisherheather@example.com'}}, {'c': {'address': '7285 Brittany Street Suite 973\\nAustinfort, MP 85397', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-921-884-0449x50668', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1954, 9, 24), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Mark Shelton', 'customer_id': 36, 'email': 'christophercamacho@example.org'}}, {'c': {'address': 'PSC 9712, Box 6781\\nAPO AA 47613', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '(941)446-8400', 'date_of_birth': neo4j.time.Date(1981, 2, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jeremy Juarez', 'customer_id': 55, 'email': 'gilberttara@example.org'}}, {'c': {'address': '5658 Alexis Via Apt. 885\\nNorth Lisa, VI 89282', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-998-305-0627x283', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1970, 3, 16), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sarah Page', 'customer_id': 154, 'email': 'stewartjackson@example.com'}}, {'c': {'address': '0398 Hunter Forks Suite 674\\nEast Michealbury, AK 13990', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-517-757-7503x811', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1970, 4, 19), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Carl Lewis', 'customer_id': 197, 'email': 'willisjonathon@example.com'}}, {'c': {'address': 'Unit 3014 Box 0267\\nDPO AA 39684', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-486-417-2324x129', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1982, 2, 26), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Fernando Hammond', 'customer_id': 149, 'email': 'qshannon@example.net'}}]",
    "cypher_time_exec": 0.05042145800689468,
    "id": "d6e31c95-30ca-4cc3-b0c8-a687adbdff5a",
    "query": "Find customers whose total deposits are greater than twice their total loans."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE date(t.transaction_date) >= date({ year: date().year - 1, month: 1, day: 1 })\nRETURN c.customer_id, COUNT(t) AS transaction_count\nORDER BY transaction_count DESC\nLIMIT 10",
    "cypher_time_llm_gen": 3.021225083997706,
    "cypher_answer": "[{'c.customer_id': 133, 'transaction_count': 12}, {'c.customer_id': 170, 'transaction_count': 12}, {'c.customer_id': 153, 'transaction_count': 10}, {'c.customer_id': 37, 'transaction_count': 7}, {'c.customer_id': 192, 'transaction_count': 7}, {'c.customer_id': 16, 'transaction_count': 7}, {'c.customer_id': 33, 'transaction_count': 6}, {'c.customer_id': 24, 'transaction_count': 6}, {'c.customer_id': 30, 'transaction_count': 6}, {'c.customer_id': 67, 'transaction_count': 6}]",
    "cypher_time_exec": 0.021582875000603963,
    "id": "70172d66-64a4-4fe4-9289-f0ce15ea20b8",
    "query": "Get the top 10 customers who made the largest number of transactions in the last year."
  },
  {
    "cypher_command": "MATCH (a:Accounts)\nWHERE NOT (a)<-[:HAS_TRANSACTION]-(:Transactions)\nRETURN a",
    "cypher_time_llm_gen": 1.4831362499971874,
    "cypher_answer": "[{'a': {'account_number': 'OPWX61318773121136', 'account_id': 61, 'account_balance': 13536.72, 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'customer_id': 183}}, {'a': {'account_number': 'IQNZ09312882342897', 'account_id': 63, 'account_balance': 57927.15, 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'customer_id': 35}}, {'a': {'account_number': 'XMVO15224781551990', 'account_id': 68, 'account_balance': 72385.52, 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'customer_id': 21}}, {'a': {'account_number': 'FYKL42922998172999', 'account_id': 112, 'account_balance': 53985.01, 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'customer_id': 136}}, {'a': {'account_number': 'QFRG21134557955881', 'account_id': 187, 'account_balance': 33492.28, 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'customer_id': 76}}, {'a': {'account_number': 'IAND71360925698356', 'account_id': 201, 'account_balance': 17817.09, 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'customer_id': 82}}, {'a': {'account_number': 'VIME86549242242940', 'account_id': 207, 'account_balance': 53014.02, 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 912337000, tzinfo=pytz.FixedOffset(420)), 'customer_id': 67}}]",
    "cypher_time_exec": 0.018801792000886053,
    "id": "06ed3285-8f23-4611-a5f0-65f86ad18bda",
    "query": "Identify accounts that have never had a transaction."
  },
  {
    "cypher_command": "MATCH (l:Loans)<-[:BELONGS_TO_CUSTOMER]-(c:Customers)-[:BELONGS_TO_BRANCH]->(b:Branches)\nWITH b.branch_id AS branch, l.loan_type_id AS loanType, AVG(l.balance) AS averageLoanBalance\nRETURN branch, loanType, averageLoanBalance",
    "cypher_time_llm_gen": 3.288049000002502,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.012473041999328416,
    "id": "3f048d7f-a3fb-41b1-8f05-816511b034cf",
    "query": "Find the average loan balance by loan type and branch."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(cards:Cards)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(loans:Loans)\nWITH c, COUNT(cards) AS cardCount\nWHERE cardCount > 2\nRETURN c",
    "cypher_time_llm_gen": 2.137707583999145,
    "cypher_answer": "[{'c': {'address': '2449 Scott Prairie Apt. 184\\nChambersview, OR 96280', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-642-999-5517x41085', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1973, 3, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Cheryl Snow', 'customer_id': 181, 'email': 'contrerascorey@example.net'}}, {'c': {'address': '6911 William Island Suite 459\\nStanleychester, ID 12627', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(514)567-4516x52097', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1974, 6, 10), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Richard Vang', 'customer_id': 24, 'email': 'sarahhensley@example.net'}}, {'c': {'address': '8838 Michael Islands\\nWest Bryan, NY 59920', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-508-387-8957x38712', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1989, 10, 22), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Lisa Hurley', 'customer_id': 42, 'email': 'michaelhardy@example.net'}}, {'c': {'address': '91932 Moore Groves Suite 523\\nSouth Gina, PW 80889', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '961-782-0608', 'date_of_birth': neo4j.time.Date(2002, 6, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Nicholas Long', 'customer_id': 121, 'email': 'campbellholly@example.com'}}, {'c': {'address': '129 Lawrence Turnpike Suite 587\\nGutierrezmouth, NE 75741', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-404-295-0199x40554', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1959, 1, 1), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'James Campbell', 'customer_id': 43, 'email': 'phillipcamacho@example.com'}}, {'c': {'address': '9868 George Square Apt. 680\\nLake Brendachester, KY 51732', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '465-310-2349x709', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(2001, 7, 8), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Alan Thompson', 'customer_id': 179, 'email': 'marystrickland@example.net'}}, {'c': {'address': '5296 Henry Cove\\nAndersonhaven, KS 50058', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '(633)496-9034', 'date_of_birth': neo4j.time.Date(1996, 12, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michael Watson', 'customer_id': 185, 'email': 'brianthompson@example.org'}}, {'c': {'address': '8398 Barr Ramp\\nNorth Alison, CA 90601', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-359-707-6722x172', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1996, 9, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sarah Collins', 'customer_id': 80, 'email': 'michelle53@example.net'}}, {'c': {'address': '060 Patricia Cape Apt. 408\\nSethport, SD 45020', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(621)731-7805x1706', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1962, 12, 27), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Angela Miller', 'customer_id': 96, 'email': 'karen14@example.net'}}, {'c': {'address': '28040 Rodriguez Rue\\nAdamsmouth, KY 12671', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '(619)747-1013', 'date_of_birth': neo4j.time.Date(1966, 6, 3), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jennifer Rush', 'customer_id': 159, 'email': 'nicholsanita@example.net'}}, {'c': {'address': '36221 Wendy Groves\\nRodriguezburgh, ID 66337', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '210-640-6246', 'date_of_birth': neo4j.time.Date(1988, 9, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michael Spencer', 'customer_id': 140, 'email': 'aliciareid@example.com'}}, {'c': {'address': '214 Payne Common Suite 818\\nNorth Michael, SC 25659', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '370-548-5366', 'date_of_birth': neo4j.time.Date(1974, 4, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Cynthia Gardner', 'customer_id': 15, 'email': 'bryannoah@example.org'}}, {'c': {'address': '995 Charles Trace Suite 284\\nNorth Krystal, DC 32653', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '4855659311', 'date_of_birth': neo4j.time.Date(1980, 12, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kirsten Garrett', 'customer_id': 200, 'email': 'yesenia85@example.org'}}, {'c': {'address': '962 Shannon Radial Suite 943\\nLake Brian, MI 63233', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '8156356052', 'date_of_birth': neo4j.time.Date(1995, 8, 13), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Regina Patel', 'customer_id': 150, 'email': 'kimberly83@example.com'}}, {'c': {'address': '6991 Jessica Station Suite 328\\nPort Jasmine, CA 29426', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '917.674.0179x69699', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1998, 11, 28), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Carol Gonzalez', 'customer_id': 173, 'email': 'jreynolds@example.org'}}, {'c': {'address': '195 Glass Point\\nNorth Tammyburgh, AR 56101', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '920-718-8924', 'date_of_birth': neo4j.time.Date(1979, 10, 23), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'John Salas', 'customer_id': 198, 'email': 'joneshaley@example.net'}}, {'c': {'address': '4576 Ward Radial\\nRogerchester, NC 82052', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-743-559-6798x842', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1985, 2, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'William Sandoval', 'customer_id': 155, 'email': 'carterlisa@example.net'}}, {'c': {'address': '981 Yang Ridge\\nNathanielhaven, OR 43610', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(860)547-2850x2469', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1990, 6, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Karen Long', 'customer_id': 120, 'email': 'toddjason@example.net'}}, {'c': {'address': '7716 Nelson Shores Apt. 328\\nEast Matthewtown, PR 27319', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-689-649-8379x2067', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1964, 7, 31), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Emily Greene', 'customer_id': 52, 'email': 'lfields@example.org'}}]",
    "cypher_time_exec": 0.025585916999261826,
    "id": "b526346f-b67e-4272-956f-870e09b62c84",
    "query": "Retrieve customers who own more than 2 cards and at least 1 loan."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE t.transaction_amount > a.account_balance\nRETURN c",
    "cypher_time_llm_gen": 2.941565332999744,
    "cypher_answer": "[{'c': {'address': '79254 Rice Trail Suite 531\\nMyersport, AS 55090', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(599)299-0998x031', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1994, 8, 16), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Dr. Jennifer Allen', 'customer_id': 59, 'email': 'seanjones@example.com'}}, {'c': {'address': '229 Sandoval Run Apt. 475\\nPatriciafort, HI 28977', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '458-575-4316x81092', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(2004, 8, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kirk Martinez', 'customer_id': 88, 'email': 'mduran@example.net'}}, {'c': {'address': '229 Sandoval Run Apt. 475\\nPatriciafort, HI 28977', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '458-575-4316x81092', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(2004, 8, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kirk Martinez', 'customer_id': 88, 'email': 'mduran@example.net'}}, {'c': {'address': '229 Sandoval Run Apt. 475\\nPatriciafort, HI 28977', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '458-575-4316x81092', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(2004, 8, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kirk Martinez', 'customer_id': 88, 'email': 'mduran@example.net'}}, {'c': {'address': '4760 Wayne Knolls\\nNew Ryan, CA 50826', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '995-802-8538x16384', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1996, 12, 23), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kyle Butler', 'customer_id': 101, 'email': 'priceisaiah@example.org'}}, {'c': {'address': '4760 Wayne Knolls\\nNew Ryan, CA 50826', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '995-802-8538x16384', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1996, 12, 23), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kyle Butler', 'customer_id': 101, 'email': 'priceisaiah@example.org'}}, {'c': {'address': '20762 Vazquez Prairie Suite 122\\nLake Olivia, FM 36595', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '001-644-430-5154', 'date_of_birth': neo4j.time.Date(2004, 5, 6), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Gabriela Jones', 'customer_id': 77, 'email': 'ruizstephen@example.org'}}, {'c': {'address': '20762 Vazquez Prairie Suite 122\\nLake Olivia, FM 36595', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 4, 'phone': '001-644-430-5154', 'date_of_birth': neo4j.time.Date(2004, 5, 6), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Gabriela Jones', 'customer_id': 77, 'email': 'ruizstephen@example.org'}}, {'c': {'address': '1694 Ashley Pike Suite 747\\nPort Jacqueline, OH 38447', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '520.409.9694', 'date_of_birth': neo4j.time.Date(1961, 10, 21), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Christopher Brown', 'customer_id': 174, 'email': 'felicia26@example.net'}}, {'c': {'address': '9868 George Square Apt. 680\\nLake Brendachester, KY 51732', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '465-310-2349x709', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(2001, 7, 8), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Alan Thompson', 'customer_id': 179, 'email': 'marystrickland@example.net'}}, {'c': {'address': '6993 Jones Mountain Apt. 899\\nWest Rhonda, AZ 64633', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-441-305-2663x931', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1954, 10, 8), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Ryan Thomas', 'customer_id': 26, 'email': 'karenthompson@example.com'}}, {'c': {'address': '6993 Jones Mountain Apt. 899\\nWest Rhonda, AZ 64633', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-441-305-2663x931', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1954, 10, 8), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Ryan Thomas', 'customer_id': 26, 'email': 'karenthompson@example.com'}}, {'c': {'address': '229 Sandoval Run Apt. 475\\nPatriciafort, HI 28977', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '458-575-4316x81092', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(2004, 8, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kirk Martinez', 'customer_id': 88, 'email': 'mduran@example.net'}}, {'c': {'address': '229 Sandoval Run Apt. 475\\nPatriciafort, HI 28977', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '458-575-4316x81092', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(2004, 8, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kirk Martinez', 'customer_id': 88, 'email': 'mduran@example.net'}}, {'c': {'address': '9209 Robinson Isle Suite 434\\nSouth Ericville, GA 33024', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '(464)332-0335', 'date_of_birth': neo4j.time.Date(1963, 10, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Daniel Thomas', 'customer_id': 29, 'email': 'hgoodwin@example.net'}}, {'c': {'address': '9209 Robinson Isle Suite 434\\nSouth Ericville, GA 33024', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '(464)332-0335', 'date_of_birth': neo4j.time.Date(1963, 10, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Daniel Thomas', 'customer_id': 29, 'email': 'hgoodwin@example.net'}}, {'c': {'address': '9209 Robinson Isle Suite 434\\nSouth Ericville, GA 33024', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '(464)332-0335', 'date_of_birth': neo4j.time.Date(1963, 10, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Daniel Thomas', 'customer_id': 29, 'email': 'hgoodwin@example.net'}}, {'c': {'address': '9209 Robinson Isle Suite 434\\nSouth Ericville, GA 33024', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '(464)332-0335', 'date_of_birth': neo4j.time.Date(1963, 10, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Daniel Thomas', 'customer_id': 29, 'email': 'hgoodwin@example.net'}}, {'c': {'address': '9209 Robinson Isle Suite 434\\nSouth Ericville, GA 33024', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '(464)332-0335', 'date_of_birth': neo4j.time.Date(1963, 10, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Daniel Thomas', 'customer_id': 29, 'email': 'hgoodwin@example.net'}}, {'c': {'address': '2263 Benson Crest\\nLawrencemouth, KY 48156', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '387-732-8439', 'date_of_birth': neo4j.time.Date(1965, 6, 4), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Kelly Knight', 'customer_id': 21, 'email': 'jennifer88@example.org'}}, {'c': {'address': '3380 Williams Rapids\\nWilliamsfort, PA 65951', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '(301)203-3741', 'date_of_birth': neo4j.time.Date(2004, 12, 17), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Margaret Pacheco', 'customer_id': 112, 'email': 'lindascott@example.org'}}, {'c': {'address': '3380 Williams Rapids\\nWilliamsfort, PA 65951', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '(301)203-3741', 'date_of_birth': neo4j.time.Date(2004, 12, 17), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Margaret Pacheco', 'customer_id': 112, 'email': 'lindascott@example.org'}}, {'c': {'address': '9424 David Islands\\nBenjaminland, WA 80949', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '9745715609', 'date_of_birth': neo4j.time.Date(1990, 1, 27), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Brady Smith', 'customer_id': 167, 'email': 'bwilliams@example.org'}}, {'c': {'address': '9424 David Islands\\nBenjaminland, WA 80949', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '9745715609', 'date_of_birth': neo4j.time.Date(1990, 1, 27), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Brady Smith', 'customer_id': 167, 'email': 'bwilliams@example.org'}}, {'c': {'address': '9424 David Islands\\nBenjaminland, WA 80949', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '9745715609', 'date_of_birth': neo4j.time.Date(1990, 1, 27), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Brady Smith', 'customer_id': 167, 'email': 'bwilliams@example.org'}}, {'c': {'address': '9424 David Islands\\nBenjaminland, WA 80949', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '9745715609', 'date_of_birth': neo4j.time.Date(1990, 1, 27), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Brady Smith', 'customer_id': 167, 'email': 'bwilliams@example.org'}}, {'c': {'address': '9424 David Islands\\nBenjaminland, WA 80949', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '9745715609', 'date_of_birth': neo4j.time.Date(1990, 1, 27), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Brady Smith', 'customer_id': 167, 'email': 'bwilliams@example.org'}}, {'c': {'address': '755 Sheila Ridges Suite 438\\nWest Amandashire, ND 47654', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '2004961939', 'date_of_birth': neo4j.time.Date(1997, 8, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Amy Calderon', 'customer_id': 30, 'email': 'janetholland@example.net'}}, {'c': {'address': '5186 Mendez Walks Apt. 003\\nEast Heatherview, MS 97890', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '208.830.9237', 'date_of_birth': neo4j.time.Date(1958, 7, 16), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michelle Yang', 'customer_id': 98, 'email': 'brendatodd@example.net'}}, {'c': {'address': '5186 Mendez Walks Apt. 003\\nEast Heatherview, MS 97890', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '208.830.9237', 'date_of_birth': neo4j.time.Date(1958, 7, 16), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michelle Yang', 'customer_id': 98, 'email': 'brendatodd@example.net'}}, {'c': {'address': '5186 Mendez Walks Apt. 003\\nEast Heatherview, MS 97890', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '208.830.9237', 'date_of_birth': neo4j.time.Date(1958, 7, 16), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michelle Yang', 'customer_id': 98, 'email': 'brendatodd@example.net'}}, {'c': {'address': '5186 Mendez Walks Apt. 003\\nEast Heatherview, MS 97890', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '208.830.9237', 'date_of_birth': neo4j.time.Date(1958, 7, 16), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michelle Yang', 'customer_id': 98, 'email': 'brendatodd@example.net'}}, {'c': {'address': '5186 Mendez Walks Apt. 003\\nEast Heatherview, MS 97890', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '208.830.9237', 'date_of_birth': neo4j.time.Date(1958, 7, 16), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Michelle Yang', 'customer_id': 98, 'email': 'brendatodd@example.net'}}, {'c': {'address': '3903 Morgan Park\\nStevenfort, AK 77785', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-321-736-3061x1013', 'branch_id': 3, 'date_of_birth': neo4j.time.Date(1986, 9, 2), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Dustin Jackson', 'customer_id': 69, 'email': 'thomaskara@example.com'}}, {'c': {'address': '6911 William Island Suite 459\\nStanleychester, ID 12627', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(514)567-4516x52097', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1974, 6, 10), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Richard Vang', 'customer_id': 24, 'email': 'sarahhensley@example.net'}}, {'c': {'address': '6911 William Island Suite 459\\nStanleychester, ID 12627', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '(514)567-4516x52097', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1974, 6, 10), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Richard Vang', 'customer_id': 24, 'email': 'sarahhensley@example.net'}}, {'c': {'address': '154 Harrison Island\\nSouth Catherine, PW 52395', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '231-397-2718x48604', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1956, 7, 24), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Natalie Gordon', 'customer_id': 118, 'email': 'mackenzie99@example.com'}}, {'c': {'address': '154 Harrison Island\\nSouth Catherine, PW 52395', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '231-397-2718x48604', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1956, 7, 24), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Natalie Gordon', 'customer_id': 118, 'email': 'mackenzie99@example.com'}}, {'c': {'address': '4576 Ward Radial\\nRogerchester, NC 82052', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-743-559-6798x842', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1985, 2, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'William Sandoval', 'customer_id': 155, 'email': 'carterlisa@example.net'}}, {'c': {'address': '4576 Ward Radial\\nRogerchester, NC 82052', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-743-559-6798x842', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1985, 2, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'William Sandoval', 'customer_id': 155, 'email': 'carterlisa@example.net'}}, {'c': {'address': '755 Sheila Ridges Suite 438\\nWest Amandashire, ND 47654', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '2004961939', 'date_of_birth': neo4j.time.Date(1997, 8, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Amy Calderon', 'customer_id': 30, 'email': 'janetholland@example.net'}}, {'c': {'address': '755 Sheila Ridges Suite 438\\nWest Amandashire, ND 47654', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '2004961939', 'date_of_birth': neo4j.time.Date(1997, 8, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Amy Calderon', 'customer_id': 30, 'email': 'janetholland@example.net'}}, {'c': {'address': '755 Sheila Ridges Suite 438\\nWest Amandashire, ND 47654', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '2004961939', 'date_of_birth': neo4j.time.Date(1997, 8, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Amy Calderon', 'customer_id': 30, 'email': 'janetholland@example.net'}}, {'c': {'address': '755 Sheila Ridges Suite 438\\nWest Amandashire, ND 47654', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '2004961939', 'date_of_birth': neo4j.time.Date(1997, 8, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Amy Calderon', 'customer_id': 30, 'email': 'janetholland@example.net'}}, {'c': {'address': '755 Sheila Ridges Suite 438\\nWest Amandashire, ND 47654', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '2004961939', 'date_of_birth': neo4j.time.Date(1997, 8, 25), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Amy Calderon', 'customer_id': 30, 'email': 'janetholland@example.net'}}, {'c': {'address': '20824 Pena Street\\nPort Calvin, CO 60263', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '844-754-0297x63535', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1969, 3, 19), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Hannah Scott', 'customer_id': 137, 'email': 'michael02@example.org'}}, {'c': {'address': '680 Diaz Walks Suite 824\\nRachelview, PA 69687', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '573-820-4764x21496', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1987, 9, 12), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Teresa Anderson', 'customer_id': 182, 'email': 'williamsjustin@example.org'}}, {'c': {'address': '7843 Anita Burg\\nCollinshaven, MP 41920', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '001-781-369-6332x1560', 'branch_id': 2, 'date_of_birth': neo4j.time.Date(1969, 6, 30), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jennifer Bryan', 'customer_id': 16, 'email': 'baldwincrystal@example.net'}}, {'c': {'address': '0307 Aaron Island\\nNorth Amandaport, AR 30657', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '958.985.7150', 'date_of_birth': neo4j.time.Date(1983, 8, 31), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Mathew Sutton', 'customer_id': 158, 'email': 'rodriguezcrystal@example.com'}}, {'c': {'address': '0307 Aaron Island\\nNorth Amandaport, AR 30657', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '958.985.7150', 'date_of_birth': neo4j.time.Date(1983, 8, 31), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Mathew Sutton', 'customer_id': 158, 'email': 'rodriguezcrystal@example.com'}}, {'c': {'address': '0307 Aaron Island\\nNorth Amandaport, AR 30657', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '958.985.7150', 'date_of_birth': neo4j.time.Date(1983, 8, 31), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Mathew Sutton', 'customer_id': 158, 'email': 'rodriguezcrystal@example.com'}}, {'c': {'address': '0307 Aaron Island\\nNorth Amandaport, AR 30657', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 3, 'phone': '958.985.7150', 'date_of_birth': neo4j.time.Date(1983, 8, 31), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Mathew Sutton', 'customer_id': 158, 'email': 'rodriguezcrystal@example.com'}}, {'c': {'address': '991 Crosby Manor Apt. 799\\nLake Saraside, TN 61718', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '+1-593-736-3066x334', 'branch_id': 4, 'date_of_birth': neo4j.time.Date(1967, 6, 26), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Joe Wilson', 'customer_id': 65, 'email': 'cwhitehead@example.net'}}, {'c': {'address': '198 Jamie Ville\\nClintonmouth, PA 94755', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '743.362.1996', 'date_of_birth': neo4j.time.Date(1977, 8, 2), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Tina Carpenter', 'customer_id': 71, 'email': 'charles68@example.com'}}, {'c': {'address': '258 Davis Creek Apt. 332\\nSouth Beth, NH 33052', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '826.442.5049x70393', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1999, 8, 5), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sarah Roberts', 'customer_id': 60, 'email': 'hannah98@example.net'}}, {'c': {'address': '258 Davis Creek Apt. 332\\nSouth Beth, NH 33052', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '826.442.5049x70393', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1999, 8, 5), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sarah Roberts', 'customer_id': 60, 'email': 'hannah98@example.net'}}, {'c': {'address': '258 Davis Creek Apt. 332\\nSouth Beth, NH 33052', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '826.442.5049x70393', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1999, 8, 5), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sarah Roberts', 'customer_id': 60, 'email': 'hannah98@example.net'}}, {'c': {'address': '258 Davis Creek Apt. 332\\nSouth Beth, NH 33052', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '826.442.5049x70393', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(1999, 8, 5), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Sarah Roberts', 'customer_id': 60, 'email': 'hannah98@example.net'}}, {'c': {'address': '6925 Katherine Common Apt. 076\\nPort Luis, LA 92082', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '2063357039', 'date_of_birth': neo4j.time.Date(1996, 1, 20), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Robert Munoz', 'customer_id': 133, 'email': 'garyday@example.org'}}, {'c': {'address': '6925 Katherine Common Apt. 076\\nPort Luis, LA 92082', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '2063357039', 'date_of_birth': neo4j.time.Date(1996, 1, 20), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Robert Munoz', 'customer_id': 133, 'email': 'garyday@example.org'}}, {'c': {'address': '6925 Katherine Common Apt. 076\\nPort Luis, LA 92082', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '2063357039', 'date_of_birth': neo4j.time.Date(1996, 1, 20), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Robert Munoz', 'customer_id': 133, 'email': 'garyday@example.org'}}, {'c': {'address': '6925 Katherine Common Apt. 076\\nPort Luis, LA 92082', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '2063357039', 'date_of_birth': neo4j.time.Date(1996, 1, 20), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Robert Munoz', 'customer_id': 133, 'email': 'garyday@example.org'}}, {'c': {'address': '6925 Katherine Common Apt. 076\\nPort Luis, LA 92082', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '2063357039', 'date_of_birth': neo4j.time.Date(1996, 1, 20), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Robert Munoz', 'customer_id': 133, 'email': 'garyday@example.org'}}, {'c': {'address': '940 Hill Rapids Apt. 822\\nLake Christianport, KY 68413', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'phone': '524-709-1776x483', 'branch_id': 1, 'date_of_birth': neo4j.time.Date(2002, 11, 5), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Taylor Fisher', 'customer_id': 102, 'email': 'uromero@example.com'}}, {'c': {'address': '496 Harvey Fall\\nNew Daniel, MT 81453', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '671-371-0678', 'date_of_birth': neo4j.time.Date(1988, 4, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Nicole Le', 'customer_id': 27, 'email': 'abigailcox@example.net'}}, {'c': {'address': '496 Harvey Fall\\nNew Daniel, MT 81453', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '671-371-0678', 'date_of_birth': neo4j.time.Date(1988, 4, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Nicole Le', 'customer_id': 27, 'email': 'abigailcox@example.net'}}, {'c': {'address': '294 Tammy Bridge Apt. 736\\nNew Amy, OH 71171', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '(289)569-7097', 'date_of_birth': neo4j.time.Date(1974, 3, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jon Wilson', 'customer_id': 164, 'email': 'torrescarlos@example.net'}}, {'c': {'address': '294 Tammy Bridge Apt. 736\\nNew Amy, OH 71171', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 2, 'phone': '(289)569-7097', 'date_of_birth': neo4j.time.Date(1974, 3, 14), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Jon Wilson', 'customer_id': 164, 'email': 'torrescarlos@example.net'}}, {'c': {'address': '8141 Linda Flats Suite 385\\nEast Savannah, SD 08405', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '858.550.2302', 'date_of_birth': neo4j.time.Date(1994, 6, 11), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Scott Allen', 'customer_id': 17, 'email': 'danielssarah@example.net'}}, {'c': {'address': '8141 Linda Flats Suite 385\\nEast Savannah, SD 08405', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '858.550.2302', 'date_of_birth': neo4j.time.Date(1994, 6, 11), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Scott Allen', 'customer_id': 17, 'email': 'danielssarah@example.net'}}, {'c': {'address': '8141 Linda Flats Suite 385\\nEast Savannah, SD 08405', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '858.550.2302', 'date_of_birth': neo4j.time.Date(1994, 6, 11), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Scott Allen', 'customer_id': 17, 'email': 'danielssarah@example.net'}}, {'c': {'address': '8141 Linda Flats Suite 385\\nEast Savannah, SD 08405', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '858.550.2302', 'date_of_birth': neo4j.time.Date(1994, 6, 11), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Scott Allen', 'customer_id': 17, 'email': 'danielssarah@example.net'}}, {'c': {'address': '8141 Linda Flats Suite 385\\nEast Savannah, SD 08405', 'updated_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'branch_id': 1, 'phone': '858.550.2302', 'date_of_birth': neo4j.time.Date(1994, 6, 11), 'created_at': neo4j.time.DateTime(2025, 9, 23, 17, 9, 3, 819167000, tzinfo=pytz.FixedOffset(420)), 'customer_name': 'Scott Allen', 'customer_id': 17, 'email': 'danielssarah@example.net'}}]",
    "cypher_time_exec": 0.09118874999694526,
    "id": "4d26d1a3-1d00-4092-959f-aac6ad166f59",
    "query": "Find customers who made a transaction larger than their account balance at that time."
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWITH b, COUNT(card) AS blockedCards\nMATCH (b)<-[:BELONGS_TO_BRANCH]-(c2:Customers)<-[:BELONGS_TO_CUSTOMER]-(card2:Cards)\nWITH b, blockedCards, COUNT(card2) AS totalCards\nRETURN b.branch_id, (blockedCards * 100.0 / totalCards) AS percentageBlockedCards",
    "cypher_time_llm_gen": 2.9820946659965557,
    "cypher_answer": "[{'b.branch_id': 1, 'percentageBlockedCards': 100.0}, {'b.branch_id': 2, 'percentageBlockedCards': 100.0}, {'b.branch_id': 3, 'percentageBlockedCards': 100.0}, {'b.branch_id': 4, 'percentageBlockedCards': 100.0}]",
    "cypher_time_exec": 0.03692304199648788,
    "id": "0350d041-93ef-40c6-90ea-bbd209f91b42",
    "query": "Calculate the percentage of blocked cards per branch."
  },
  {
    "cypher_command": "MATCH (d:Deposits)\nWHERE date(d.end_date) < date() AND d.balance > 0\nRETURN d",
    "cypher_time_llm_gen": 1.190707958994608,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.023718333002761938,
    "id": "a3847704-b831-4bfe-87d9-cbf2419cd082",
    "query": "Find deposits that have already matured but are not yet closed."
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE date(l.created_at) >= date({ year: date().year - 2, month: 1, day: 1 })\nRETURN b.branch_id, COUNT(l) AS loan_count\nORDER BY loan_count DESC\nLIMIT 3",
    "cypher_time_llm_gen": 2.637044082999637,
    "cypher_answer": "[{'b.branch_id': 1, 'loan_count': 64}, {'b.branch_id': 2, 'loan_count': 51}, {'b.branch_id': 4, 'loan_count': 44}]",
    "cypher_time_exec": 0.01238154100428801,
    "id": "c7afc597-21b4-40c5-97f4-6224ed8dca78",
    "query": "List the top 3 branches with the highest number of loans disbursed in the past 2 years."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE id(d) <> id(l) AND c.branch_id <> l.branch_id\nRETURN DISTINCT c",
    "cypher_time_llm_gen": 2.2087196670036064,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.02485579199856147,
    "id": "a63095c7-05af-4172-aca3-f840884e0bb9",
    "query": "Find customers who have deposits and loans in different branches."
  },
  {
    "cypher_command": "MATCH (c:Customers)\nWITH c.phone AS phone, COUNT(c) AS phone_count\nWHERE phone_count > 1\nRETURN phone",
    "cypher_time_llm_gen": 2.3976269169943407,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.010509625004488043,
    "id": "dd1b60c1-e281-46af-9118-05284de526d2",
    "query": "Retrieve customers who have the same phone number registered more than once."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWHERE date().year - date(c.date_of_birth).year > 60\nRETURN avg(a.account_balance) AS average_account_balance",
    "cypher_time_llm_gen": 2.4333971250016475,
    "cypher_answer": "[{'average_account_balance': 45152.77034482759}]",
    "cypher_time_exec": 0.012038374996336643,
    "id": "c8f6b356-6f2d-4f81-9229-f029f8f0e0e2",
    "query": "Find the average account balance for customers aged above 60."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(t:Transactions)\nWHERE date(t.transaction_date) = date(l.created_at)\nRETURN t",
    "cypher_time_llm_gen": 1.9133252910032752,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.010656042002665345,
    "id": "17c7e0a4-4aa3-410b-848a-16b9f74e05da",
    "query": "List transactions that occurred on the same day a loan was disbursed for that customer."
  },
  {
    "cypher_command": "MATCH (l:Loans)<-[:BELONGS_TO_CUSTOMER]-(c:Customers)-[:HAS_LOAN_TYPE]->(lt:LoanTypes)\nRETURN lt.type AS loanType, AVG(l.interest_rate) AS averageInterestRate\nORDER BY averageInterestRate DESC\nLIMIT 1",
    "cypher_time_llm_gen": 2.345121708000079,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.02503574999718694,
    "id": "8976fa04-b55c-4d6e-8fc1-25ebad52d8b6",
    "query": "Identify the loan type with the highest average interest rate."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts) \nWITH c, avg(a.account_balance) AS avg_balance \nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts) \nWHERE a.account_balance < avg_balance \nRETURN c.customer_id, c.customer_name, a.account_balance",
    "cypher_time_llm_gen": 3.1774183329980588,
    "cypher_answer": "[{'c.customer_id': 82, 'c.customer_name': 'Bradley Butler', 'a.account_balance': 17817.09}, {'c.customer_id': 82, 'c.customer_name': 'Bradley Butler', 'a.account_balance': 24068.97}, {'c.customer_id': 82, 'c.customer_name': 'Bradley Butler', 'a.account_balance': 24011.47}, {'c.customer_id': 82, 'c.customer_name': 'Bradley Butler', 'a.account_balance': 9477.49}, {'c.customer_id': 6, 'c.customer_name': 'Andrew Clay', 'a.account_balance': 14818.79}, {'c.customer_id': 6, 'c.customer_name': 'Andrew Clay', 'a.account_balance': 12728.64}, {'c.customer_id': 116, 'c.customer_name': 'Joseph Nelson', 'a.account_balance': 59315.37}, {'c.customer_id': 171, 'c.customer_name': 'Christine Roberts', 'a.account_balance': 59205.14}, {'c.customer_id': 9, 'c.customer_name': 'Tiffany Newton', 'a.account_balance': 65937.39}, {'c.customer_id': 119, 'c.customer_name': 'Nicholas Moore', 'a.account_balance': 16206.86}, {'c.customer_id': 119, 'c.customer_name': 'Nicholas Moore', 'a.account_balance': 38248.83}, {'c.customer_id': 107, 'c.customer_name': 'Pamela Jackson', 'a.account_balance': 23700.83}, {'c.customer_id': 107, 'c.customer_name': 'Pamela Jackson', 'a.account_balance': 495.39}, {'c.customer_id': 73, 'c.customer_name': 'Sarah Turner', 'a.account_balance': 9882.35}, {'c.customer_id': 122, 'c.customer_name': 'Toni Leon', 'a.account_balance': 35743.12}, {'c.customer_id': 59, 'c.customer_name': 'Dr. Jennifer Allen', 'a.account_balance': 3873.98}, {'c.customer_id': 88, 'c.customer_name': 'Kirk Martinez', 'a.account_balance': -5512.42}, {'c.customer_id': 88, 'c.customer_name': 'Kirk Martinez', 'a.account_balance': -764.56}, {'c.customer_id': 61, 'c.customer_name': 'Mary Burke', 'a.account_balance': 93533.02}, {'c.customer_id': 135, 'c.customer_name': 'Nancy Scott', 'a.account_balance': 96100.94}, {'c.customer_id': 47, 'c.customer_name': 'Michael Patel', 'a.account_balance': 41800.94}, {'c.customer_id': 47, 'c.customer_name': 'Michael Patel', 'a.account_balance': 34538.4}, {'c.customer_id': 34, 'c.customer_name': 'Thomas Johnson', 'a.account_balance': 21750.36}, {'c.customer_id': 34, 'c.customer_name': 'Thomas Johnson', 'a.account_balance': 15780.62}, {'c.customer_id': 172, 'c.customer_name': 'Luke Hansen', 'a.account_balance': 16268.71}, {'c.customer_id': 94, 'c.customer_name': 'Jason Williams', 'a.account_balance': 30563.37}, {'c.customer_id': 27, 'c.customer_name': 'Nicole Le', 'a.account_balance': -9224.86}, {'c.customer_id': 129, 'c.customer_name': 'Alexandria Carter', 'a.account_balance': 41037.05}, {'c.customer_id': 50, 'c.customer_name': 'Jerry Bradford', 'a.account_balance': 9625.11}, {'c.customer_id': 50, 'c.customer_name': 'Jerry Bradford', 'a.account_balance': 39014.2}, {'c.customer_id': 192, 'c.customer_name': 'Shelley Powell', 'a.account_balance': 14235.13}, {'c.customer_id': 33, 'c.customer_name': 'Jennifer Cunningham', 'a.account_balance': 5543.75}, {'c.customer_id': 170, 'c.customer_name': 'Mckenzie Price', 'a.account_balance': 60647.36}, {'c.customer_id': 170, 'c.customer_name': 'Mckenzie Price', 'a.account_balance': 15613.32}, {'c.customer_id': 187, 'c.customer_name': 'Jesse Taylor', 'a.account_balance': 69339.0}, {'c.customer_id': 118, 'c.customer_name': 'Natalie Gordon', 'a.account_balance': 29914.22}, {'c.customer_id': 118, 'c.customer_name': 'Natalie Gordon', 'a.account_balance': 2800.52}, {'c.customer_id': 138, 'c.customer_name': 'Robert Campbell', 'a.account_balance': 92514.71}, {'c.customer_id': 117, 'c.customer_name': 'Shannon Moore', 'a.account_balance': 49824.22}, {'c.customer_id': 174, 'c.customer_name': 'Christopher Brown', 'a.account_balance': 2450.99}, {'c.customer_id': 25, 'c.customer_name': 'Jennifer Gray', 'a.account_balance': 47507.61}, {'c.customer_id': 66, 'c.customer_name': 'Katherine Morris', 'a.account_balance': 57792.28}, {'c.customer_id': 66, 'c.customer_name': 'Katherine Morris', 'a.account_balance': 53436.96}, {'c.customer_id': 156, 'c.customer_name': 'Paul Cook', 'a.account_balance': 20524.55}, {'c.customer_id': 148, 'c.customer_name': 'Alice Peterson', 'a.account_balance': 86197.01}, {'c.customer_id': 148, 'c.customer_name': 'Alice Peterson', 'a.account_balance': 79184.84}, {'c.customer_id': 5, 'c.customer_name': 'Norma Velazquez', 'a.account_balance': -1063.66}, {'c.customer_id': 179, 'c.customer_name': 'Alan Thompson', 'a.account_balance': -749.99}, {'c.customer_id': 13, 'c.customer_name': 'Michael Oconnor', 'a.account_balance': 95268.8}, {'c.customer_id': 183, 'c.customer_name': 'Sheri Roberts', 'a.account_balance': 6032.75}, {'c.customer_id': 71, 'c.customer_name': 'Tina Carpenter', 'a.account_balance': -6204.32}, {'c.customer_id': 56, 'c.customer_name': 'Mitchell Reyes', 'a.account_balance': 11973.95}, {'c.customer_id': 21, 'c.customer_name': 'Kelly Knight', 'a.account_balance': 4458.21}, {'c.customer_id': 58, 'c.customer_name': 'Daniel Johnson', 'a.account_balance': 29968.75}, {'c.customer_id': 58, 'c.customer_name': 'Daniel Johnson', 'a.account_balance': 22762.33}, {'c.customer_id': 58, 'c.customer_name': 'Daniel Johnson', 'a.account_balance': 9517.47}, {'c.customer_id': 31, 'c.customer_name': 'Kerry Wyatt', 'a.account_balance': 30018.45}, {'c.customer_id': 93, 'c.customer_name': 'Miranda Brown', 'a.account_balance': 23148.29}, {'c.customer_id': 155, 'c.customer_name': 'William Sandoval', 'a.account_balance': -8235.34}, {'c.customer_id': 133, 'c.customer_name': 'Robert Munoz', 'a.account_balance': -8838.82}, {'c.customer_id': 133, 'c.customer_name': 'Robert Munoz', 'a.account_balance': 32184.24}, {'c.customer_id': 26, 'c.customer_name': 'Ryan Thomas', 'a.account_balance': -4618.68}, {'c.customer_id': 19, 'c.customer_name': 'Sara Sexton', 'a.account_balance': 54302.49}, {'c.customer_id': 186, 'c.customer_name': 'Jonathan Ramos', 'a.account_balance': 52355.96}, {'c.customer_id': 67, 'c.customer_name': 'Deborah Hamilton', 'a.account_balance': 12821.71}, {'c.customer_id': 67, 'c.customer_name': 'Deborah Hamilton', 'a.account_balance': 27100.68}, {'c.customer_id': 67, 'c.customer_name': 'Deborah Hamilton', 'a.account_balance': 18576.86}, {'c.customer_id': 153, 'c.customer_name': 'John Wright', 'a.account_balance': 33735.3}, {'c.customer_id': 153, 'c.customer_name': 'John Wright', 'a.account_balance': 19625.99}, {'c.customer_id': 7, 'c.customer_name': 'Traci Jones', 'a.account_balance': 42938.53}, {'c.customer_id': 29, 'c.customer_name': 'Daniel Thomas', 'a.account_balance': -5022.56}, {'c.customer_id': 57, 'c.customer_name': 'Andrew Bradley', 'a.account_balance': 21600.44}, {'c.customer_id': 104, 'c.customer_name': 'Crystal Howell', 'a.account_balance': 29884.36}, {'c.customer_id': 185, 'c.customer_name': 'Michael Watson', 'a.account_balance': 66474.11}, {'c.customer_id': 98, 'c.customer_name': 'Michelle Yang', 'a.account_balance': -1922.74}, {'c.customer_id': 151, 'c.customer_name': 'Lindsey Allen', 'a.account_balance': 12501.55}, {'c.customer_id': 17, 'c.customer_name': 'Scott Allen', 'a.account_balance': 8186.9}, {'c.customer_id': 17, 'c.customer_name': 'Scott Allen', 'a.account_balance': -3549.16}, {'c.customer_id': 60, 'c.customer_name': 'Sarah Roberts', 'a.account_balance': -5709.87}, {'c.customer_id': 41, 'c.customer_name': 'Robert Cole', 'a.account_balance': 33547.26}, {'c.customer_id': 147, 'c.customer_name': 'John Browning', 'a.account_balance': 11494.83}, {'c.customer_id': 10, 'c.customer_name': 'Sara Jackson', 'a.account_balance': 46577.72}, {'c.customer_id': 108, 'c.customer_name': 'Robert Kelly', 'a.account_balance': 27837.96}, {'c.customer_id': 108, 'c.customer_name': 'Robert Kelly', 'a.account_balance': 15569.72}, {'c.customer_id': 109, 'c.customer_name': 'Karen Gonzalez', 'a.account_balance': 11490.5}, {'c.customer_id': 109, 'c.customer_name': 'Karen Gonzalez', 'a.account_balance': 5599.23}, {'c.customer_id': 72, 'c.customer_name': 'John Park', 'a.account_balance': 5857.81}, {'c.customer_id': 198, 'c.customer_name': 'John Salas', 'a.account_balance': 26220.48}, {'c.customer_id': 110, 'c.customer_name': 'Linda Nelson', 'a.account_balance': 39510.76}, {'c.customer_id': 28, 'c.customer_name': 'Trevor Hernandez', 'a.account_balance': 43747.34}, {'c.customer_id': 76, 'c.customer_name': 'Brenda Lee', 'a.account_balance': 22406.25}, {'c.customer_id': 30, 'c.customer_name': 'Amy Calderon', 'a.account_balance': -3449.42}, {'c.customer_id': 30, 'c.customer_name': 'Amy Calderon', 'a.account_balance': -3921.39}, {'c.customer_id': 22, 'c.customer_name': 'Kathryn Jones', 'a.account_balance': 16032.93}, {'c.customer_id': 200, 'c.customer_name': 'Kirsten Garrett', 'a.account_balance': 38663.83}, {'c.customer_id': 200, 'c.customer_name': 'Kirsten Garrett', 'a.account_balance': 41774.57}, {'c.customer_id': 163, 'c.customer_name': 'Alex Jimenez', 'a.account_balance': 19090.5}, {'c.customer_id': 164, 'c.customer_name': 'Jon Wilson', 'a.account_balance': -294.52}, {'c.customer_id': 24, 'c.customer_name': 'Richard Vang', 'a.account_balance': -432.91}, {'c.customer_id': 137, 'c.customer_name': 'Hannah Scott', 'a.account_balance': -1205.37}, {'c.customer_id': 16, 'c.customer_name': 'Jennifer Bryan', 'a.account_balance': -3168.84}, {'c.customer_id': 16, 'c.customer_name': 'Jennifer Bryan', 'a.account_balance': 25508.17}, {'c.customer_id': 90, 'c.customer_name': 'Blake Aguilar', 'a.account_balance': 24322.22}, {'c.customer_id': 42, 'c.customer_name': 'Lisa Hurley', 'a.account_balance': 41858.93}, {'c.customer_id': 83, 'c.customer_name': 'Carl Adams', 'a.account_balance': 82404.78}, {'c.customer_id': 106, 'c.customer_name': 'Laura Lee', 'a.account_balance': 18779.96}, {'c.customer_id': 89, 'c.customer_name': 'Aaron Shepherd', 'a.account_balance': 42854.24}, {'c.customer_id': 139, 'c.customer_name': 'Rebecca Lam', 'a.account_balance': 17370.54}, {'c.customer_id': 37, 'c.customer_name': 'John Watson', 'a.account_balance': 54982.01}, {'c.customer_id': 46, 'c.customer_name': 'Douglas Douglas', 'a.account_balance': 30833.04}, {'c.customer_id': 64, 'c.customer_name': 'Mark Hawkins', 'a.account_balance': 10527.83}, {'c.customer_id': 44, 'c.customer_name': 'Dawn Richard', 'a.account_balance': 75219.19}]",
    "cypher_time_exec": 0.02479620800295379,
    "query": "List customers whose account balance is below the average balance of all customers in their branch.",
    "id": "337d8b8e-db0a-4a7b-b150-9b251b879dc9"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE date(card.expiration_date) < date() AND d.balance > 0\nRETURN DISTINCT c",
    "cypher_time_llm_gen": 2.039979624998523,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.020543750004435424,
    "id": "9124138d-a542-42ff-b59b-ba33ec7fd4bf",
    "query": "Find customers with at least one expired card but who are still active with deposits."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts), (c)<-[:BELONGS_TO_CUSTOMER]-(k:Cards)\nRETURN COUNT(DISTINCT c) AS unique_customers_with_accounts_and_cards",
    "cypher_time_llm_gen": 2.272731417004252,
    "cypher_answer": "[{'unique_customers_with_accounts_and_cards': 85}]",
    "cypher_time_exec": 0.009686625002359506,
    "id": "222b8ed5-bf56-4398-bc1a-4fa9635987cc",
    "query": "Get the total number of unique customers who hold both accounts and cards."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWITH c, COUNT(a) AS accountCount\nWHERE accountCount > 1\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 1.790207083999121,
    "cypher_answer": "[{'customerCount': 86}]",
    "cypher_time_exec": 0.026364291996287648,
    "id": "e49a989a-baca-43f8-933b-ab85b2aa217c",
    "query": "How many customers have more than one bank account?"
  },
  {
    "cypher_command": "MATCH (b:Branches {branch_code: 'NYC-01'})<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nRETURN SUM(a.account_balance) AS total_balance",
    "cypher_time_llm_gen": 2.0687898750038585,
    "cypher_answer": "[{'total_balance': 0}]",
    "cypher_time_exec": 0.05301220800174633,
    "id": "48bcafd5-c2c3-4dbe-9f3b-1385b3f022c6",
    "query": "What is the total balance of accounts for customers from the branch with code 'NYC-01'?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE date().year - date(c.date_of_birth).year > 60\nRETURN count(t) AS transaction_count",
    "cypher_time_llm_gen": 2.198377459004405,
    "cypher_answer": "[{'transaction_count': 196}]",
    "cypher_time_exec": 0.050214374998176936,
    "id": "70f898e2-fd8c-4912-ad27-ce882dbab545",
    "query": "How many transactions were made by customers over the age of 60?"
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE a.account_balance > 20000\nRETURN AVG(t.transaction_amount) AS average_transaction_amount",
    "cypher_time_llm_gen": 1.4866752090019872,
    "cypher_answer": "[{'average_transaction_amount': 324.9925606469003}]",
    "cypher_time_exec": 0.04748770800506463,
    "id": "83ed444e-5fe7-4d20-938d-87dccbe65d21",
    "query": "What's the average transaction amount for accounts with over $20,000 in balance?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE card.is_blocked = true\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(loan:Loans)\nRETURN SUM(loan.balance) AS total_loan_balance",
    "cypher_time_llm_gen": 2.504061666004418,
    "cypher_answer": "[{'total_loan_balance': -1846659.97}]",
    "cypher_time_exec": 0.05223504100285936,
    "id": "855fc08f-a499-417a-8a5f-8e0d957e1b29",
    "query": "What is the total loan balance for customers who have at least one blocked card?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE l.loan_type_id = 'Mortgage'\nRETURN COUNT(DISTINCT c) AS distinct_customers_with_mortgage",
    "cypher_time_llm_gen": 1.5445699580013752,
    "cypher_answer": "[{'distinct_customers_with_mortgage': 0}]",
    "cypher_time_exec": 0.04093191599531565,
    "id": "af133fa5-9a44-4995-907e-d684aea61bca",
    "query": "How many distinct customers have taken out a 'Mortgage'?"
  },
  {
    "cypher_command": "MATCH (c:Customers {customer_name: 'Robert Williams'})<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nRETURN COUNT(t) AS total_transactions",
    "cypher_time_llm_gen": 2.1308449160060263,
    "cypher_answer": "[{'total_transactions': 0}]",
    "cypher_time_exec": 0.045698624999204185,
    "id": "65d6c97b-cdde-4005-bd6e-21e6ae438a28",
    "query": "What is the total number of transactions made by the customer 'Robert Williams'?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nRETURN AVG(a.account_balance) AS average_account_balance",
    "cypher_time_llm_gen": 1.7565711249990272,
    "cypher_answer": "[{'average_account_balance': 45288.432686084154}]",
    "cypher_time_exec": 0.043178833002457395,
    "id": "6cbc7b5f-d42e-45aa-8011-ff1aaebe2ccd",
    "query": "What is the average account balance for customers who also have a loan?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE l.loan_type_id = 1 AND d.deposit_type_id = 1\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.330321790999733,
    "cypher_answer": "[{'customer_count': 2}]",
    "cypher_time_exec": 0.04917645800014725,
    "id": "5de81322-aab6-4f26-8c2a-4522e3da4cfd",
    "query": "How many customers have both a 'Personal Loan' and a 'Fixed Deposit'?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)-[:HAS_TRANSACTION]->(a)\nWHERE c.branch_id = 'CHI-03' AND date(t.transaction_date) >= date({ year: date().year, month: date().month - 1, day: 1 }) \nAND date(t.transaction_date) < date({ year: date().year, month: date().month, day: 1 })\nRETURN SUM(t.transaction_amount) AS total_transaction_amount",
    "cypher_time_llm_gen": 5.151803667002241,
    "cypher_answer": "[{'total_transaction_amount': 0}]",
    "cypher_time_exec": 0.07315983400621917,
    "id": "e117f86a-c98a-4f1c-995e-ac2f4a89b71e",
    "query": "What was the total transaction amount last month for all customers in the 'CHI-03' branch?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, SUM(a.account_balance) AS total_account_balance, SUM(l.balance) AS total_loan_balance\nWHERE total_account_balance > total_loan_balance\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 2.801321207996807,
    "cypher_answer": "[{'customer_count': 101}]",
    "cypher_time_exec": 0.051660291996086016,
    "id": "7548bcfc-fb66-4035-9484-7544b45ab267",
    "query": "How many customers have a total account balance that is greater than their total loan balance?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWITH c, COUNT(card) AS cardCount\nWHERE cardCount > 3\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 1.951310790995194,
    "cypher_answer": "[{'customerCount': 3}]",
    "cypher_time_exec": 0.020538167002086993,
    "id": "7688245d-59fd-40e0-95b8-a37fa8becc69",
    "query": "How many customers hold more than 3 cards?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nRETURN c.customer_id, SUM(t.transaction_amount) AS total_transaction_amount\nORDER BY total_transaction_amount DESC\nLIMIT 1",
    "cypher_time_llm_gen": 1.9729902079998283,
    "cypher_answer": "[{'c.customer_id': 163, 'total_transaction_amount': 24710.95}]",
    "cypher_time_exec": 0.049638749995210674,
    "id": "d458323b-4ebd-42f3-9f1c-e26b56ec8251",
    "query": "What is the highest total transaction amount generated by a single customer?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH c, SUM(d.balance) AS total_deposit_balance\nWHERE total_deposit_balance > 250000\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 1.9383450410023215,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.03546733300026972,
    "id": "01f3fe1b-18fe-4dc6-baf2-16ee7d8d44e6",
    "query": "How many customers have a total deposit balance exceeding $250,000?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE date().year - date(c.date_of_birth).year < 25\nRETURN count(l) AS total_student_loans",
    "cypher_time_llm_gen": 2.0239723330014385,
    "cypher_answer": "[{'total_student_loans': 27}]",
    "cypher_time_exec": 0.05147525000211317,
    "id": "c9844da0-4ebd-42c9-a391-1c06a6138a25",
    "query": "What is the total number of 'Student' loans given to customers under 25 years old?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nMATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE card.expiration_date < date() AND date(t.transaction_date) >= date() - duration('P30D')\nRETURN count(DISTINCT c) AS expired_card_customers_with_recent_transactions",
    "cypher_time_llm_gen": 2.0916126660013106,
    "cypher_answer": "[{'expired_card_customers_with_recent_transactions': 0}]",
    "cypher_time_exec": 0.06529487499938114,
    "id": "cd542037-1b9a-4bb7-8672-d5fc5cc7d7ed",
    "query": "How many customers with an expired card have made a transaction in the last 30 days?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWHERE a.account_balance > 75000\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nRETURN AVG(l.interest_rate) AS average_interest_rate",
    "cypher_time_llm_gen": 12.90705508300016,
    "cypher_answer": "[{'average_interest_rate': 4.7870129870129885}]",
    "cypher_time_exec": 0.05079775000194786,
    "id": "f5940574-a101-48f0-bb4c-d0287f6a0a46",
    "query": "What is the average loan interest rate for customers whose total account balance is over $75,000?"
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)\nWITH b, COUNT(c) AS customerCount\nWHERE customerCount > 500\nRETURN COUNT(b) AS branchCount",
    "cypher_time_llm_gen": 1.7313152919959975,
    "cypher_answer": "[{'branchCount': 0}]",
    "cypher_time_exec": 0.04626341599941952,
    "id": "f8b5fcc5-be16-4d2d-91b7-fdb9d4d9574a",
    "query": "How many branches serve more than 500 customers?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWHERE date(a.created_at).month = date(c.date_of_birth).month AND date(a.created_at).year = date(c.date_of_birth).year\nRETURN count(a) AS accounts_opened_same_month_as_birthday",
    "cypher_time_llm_gen": 2.1354196249958477,
    "cypher_answer": "[{'accounts_opened_same_month_as_birthday': 0}]",
    "cypher_time_exec": 0.052154416996927466,
    "id": "46816891-e1ca-4ca9-9a6d-03e940ba56ea",
    "query": "How many accounts were opened in the same month as the owner's birthday?"
  },
  {
    "cypher_command": "MATCH (d:Deposits)<-[:BELONGS_TO_CUSTOMER]-(c:Customers)-[:HAS_DEPOSIT_TYPE]->(dt:DepositTypes)\nWHERE dt.type = 'Retirement'\nRETURN SUM(d.balance) AS total_retirement_deposit_balance",
    "cypher_time_llm_gen": 2.0981084580052993,
    "cypher_answer": "[{'total_retirement_deposit_balance': 0}]",
    "cypher_time_exec": 0.04332208300183993,
    "id": "23088e50-0046-41e6-a538-855495b04e81",
    "query": "What is the sum of balances for all deposits of the 'Retirement' type?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH c, AVG(t.transaction_amount) AS avg_transaction_amount\nWHERE avg_transaction_amount > 500\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 3.420576208998682,
    "cypher_answer": "[{'customer_count': 63}]",
    "cypher_time_exec": 0.048914125000010245,
    "id": "456179fa-ec79-40ea-ba55-8b623348c286",
    "query": "How many customers have an average transaction amount of more than $500?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE date(l.end_date) <= date({ year: date().year, month: 12, day: 31 })\nRETURN count(l) AS loans_to_be_paid_off",
    "cypher_time_llm_gen": 2.424785916999099,
    "cypher_answer": "[{'loans_to_be_paid_off': 16}]",
    "cypher_time_exec": 0.045911166998848785,
    "id": "a809f911-3ebb-44ba-bfce-bc198a5de8a9",
    "query": "How many loans are set to be fully paid off by the end of the current calendar year?"
  },
  {
    "cypher_command": "MATCH (c:Customers)\nWHERE c.phone STARTS WITH '310'\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 1.4578314579994185,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.020412582998687867,
    "id": "2fda6341-45fe-4beb-8d71-be0164de7445",
    "query": "How many customers have a phone number with the '310' area code?"
  },
  {
    "cypher_command": "MATCH (t:Transactions)\nWHERE date(t.transaction_date) >= date({ year: date().year, month: date().month, day: date().day - 7 }) \nRETURN sum(t.transaction_amount) AS total_transaction_value",
    "cypher_time_llm_gen": 1.8552267499981099,
    "cypher_answer": "[{'total_transaction_value': -3490.17}]",
    "cypher_time_exec": 0.0485460419949959,
    "id": "bdc47a3d-3a76-49e0-8665-c16cf1669f4a",
    "query": "What was the total value of all transactions made during the last calendar week?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE d.interest_rate < l.interest_rate\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.3825343749995227,
    "cypher_answer": "[{'customer_count': 56}]",
    "cypher_time_exec": 0.07937595800467534,
    "id": "edb628a6-f4b7-48ba-8853-6a703c3fcdf0",
    "query": "How many customers have a deposit with an interest rate lower than the bank's lowest loan rate?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE t.transaction_date >= datetime().epochMillis - 24 * 60 * 60 * 1000\nRETURN COUNT(DISTINCT c.customer_id) AS unique_customers",
    "cypher_time_llm_gen": 2.15612308299751,
    "cypher_answer": "[{'unique_customers': 0}]",
    "cypher_time_exec": 0.059042875000159256,
    "id": "2faed1c9-ffb1-41a8-93e1-a4b08f5031bc",
    "query": "How many unique customers performed a transaction in the last 24 hours?"
  },
  {
    "cypher_command": "MATCH (c1:Customers), (c2:Customers)\nWHERE c1.customer_id <> c2.customer_id AND c1.date_of_birth = c2.date_of_birth\nRETURN COUNT(DISTINCT c1.customer_id) AS shared_birthday_customers",
    "cypher_time_llm_gen": 1.8276115830012714,
    "cypher_answer": "[{'shared_birthday_customers': 2}]",
    "cypher_time_exec": 0.04963379200489726,
    "id": "e9a1672e-4f3f-40e8-bd5e-9aa12f4322de",
    "query": "How many customers share a birthday with at least one other customer?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE card.is_blocked = false AND card.balance > 10000\nRETURN count(card) AS unblocked_cards_with_high_balance",
    "cypher_time_llm_gen": 5.071063709001464,
    "cypher_answer": "[{'unblocked_cards_with_high_balance': 0}]",
    "cypher_time_exec": 0.047727500001201406,
    "id": "6fa40624-43dc-4f0a-a8c9-5f9f6f215970",
    "query": "How many unblocked cards have a balance greater than $10,000?"
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE date(t.transaction_date) >= date({ year: date().year, month: date().month, day: 1 })\nWITH a, count(t) AS transaction_count\nWHERE transaction_count > 20\nRETURN sum(a.account_balance) AS total_account_balance",
    "cypher_time_llm_gen": 2.3543841669961694,
    "cypher_answer": "[{'total_account_balance': 0}]",
    "cypher_time_exec": 0.06987404100073036,
    "id": "7039d0d1-4b47-43e2-bb52-63b94dd68994",
    "query": "What is the total account balance for accounts with more than 20 transactions this month?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWHERE date(a.created_at) < date({ year: date().year - 5, month: 1, day: 1 })\nRETURN count(DISTINCT c) AS customers_count",
    "cypher_time_llm_gen": 2.3972142499987967,
    "cypher_answer": "[{'customers_count': 0}]",
    "cypher_time_exec": 0.06057995800074423,
    "id": "5790f94b-af47-4258-9992-51f23159628d",
    "query": "How many customers opened their first account with the bank over 5 years ago?"
  },
  {
    "cypher_command": "MATCH (l:Loans)<-[:BELONGS_TO_CUSTOMER]-(c:Customers)\nWHERE l.start_date >= date({ year: 2024, month: 1, day: 1 }) AND l.start_date < date({ year: 2025, month: 1, day: 1 })\nAND (l)-[:HAS_LOAN_TYPE]->(:LoanTypes {type: 'Auto Loan'})\nRETURN count(l) AS auto_loan_count",
    "cypher_time_llm_gen": 2.9650284579984145,
    "cypher_answer": "[{'auto_loan_count': 0}]",
    "cypher_time_exec": 0.08166637499380158,
    "id": "3547cddf-e91c-440a-88bd-945e5bb9cf85",
    "query": "How many 'Auto Loan' types were granted in the year 2024?"
  },
  {
    "cypher_command": "MATCH (c:Customers)\nWHERE c.customer_name = 'Jones'\nRETURN count(c) AS customer_count",
    "cypher_time_llm_gen": 1.801150166997104,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.01565229099651333,
    "id": "358d142c-c1ff-439d-b24c-f906b54cc8de",
    "query": "What is the count of customers with the last name 'Jones'?"
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:BELONGS_TO_CUSTOMER]-(c:Customers)\nWITH c.branch_id AS branchId, AVG(a.account_balance) AS avgBalance\nMATCH (a:Accounts)<-[:BELONGS_TO_CUSTOMER]-(c:Customers)\nWHERE a.account_balance > avgBalance AND c.branch_id = branchId\nRETURN COUNT(a) AS accountsAboveAverage",
    "cypher_time_llm_gen": 2.2275980830017943,
    "cypher_answer": "[{'accountsAboveAverage': 0}]",
    "cypher_time_exec": 0.048577624998870306,
    "id": "e635330a-21d5-44db-b6b1-9772ca476a95",
    "query": "How many accounts have a balance higher than the average account balance of their branch?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards) WHERE card.is_blocked = false WITH c, COUNT(card) AS activeCardCount MATCH (c)<-[:BELONGS_TO_CUSTOMER]-(allCards:Cards) WITH c, activeCardCount, COUNT(allCards) AS totalCardCount WHERE activeCardCount = totalCardCount RETURN COUNT(DISTINCT c) AS customerCount",
    "cypher_time_llm_gen": 8.212017249999917,
    "cypher_answer": "[{'customerCount': 42}]",
    "cypher_time_exec": 0.04689499999949476,
    "query": "Count how many customers have all of their associated cards active (not blocked).",
    "id": "f3c2b1ac-e01e-4c5a-94e4-69876896396d"
  },
  {
    "cypher_command": "MATCH (d:Deposits)\nWHERE date(d.end_date) >= date({ year: date().year, month: date().month + 1, day: 1 }) \n  AND date(d.end_date) < date({ year: date().year, month: date().month + 3, day: 1 })\nRETURN count(d) AS scheduled_deposits",
    "cypher_time_llm_gen": 2.3082169170011184,
    "cypher_answer": "[{'scheduled_deposits': 3}]",
    "cypher_time_exec": 0.0473427909964812,
    "id": "803e9b7b-8a76-4e58-a291-577818758f24",
    "query": "How many deposits are scheduled to mature in the next calendar quarter?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans {loan_type_id: 'Home Equity'})<-[:HAS_LOAN_TYPE]-(lType:LoanTypes)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nRETURN COUNT(t) AS total_transactions",
    "cypher_time_llm_gen": 3.024078374997771,
    "cypher_answer": "[{'total_transactions': 0}]",
    "cypher_time_exec": 0.056362166003964376,
    "id": "811ef808-51f9-4824-9d1f-4fcdc824de3f",
    "query": "What is the total number of transactions made by customers who currently have a 'Home Equity' loan?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, SUM(l.balance) AS total_loan_balance\nWHERE total_loan_balance > 500000\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 2.7461054590021376,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.033166250002977904,
    "id": "c7337c65-af80-43c6-9721-dedf63e17fb4",
    "query": "How many customers have a total outstanding loan balance of more than $500,000?"
  },
  {
    "cypher_command": "MATCH (t:Transactions)\nWHERE date(t.transaction_date).dayOfWeek IN [6, 7]\nRETURN COUNT(t) AS total_weekend_transactions",
    "cypher_time_llm_gen": 1.6731867499984219,
    "cypher_answer": "[{'total_weekend_transactions': 285}]",
    "cypher_time_exec": 0.03216187500220258,
    "id": "6c9e135d-ba83-451b-a726-87537e691277",
    "query": "What is the total number of transactions that occurred on a weekend (Saturday or Sunday)?"
  },
  {
    "cypher_command": "MATCH (c:Customers)-[:BELONGS_TO_BRANCH]->(b:Branches {branch_address: '123 Finance St'})\nRETURN count(c) AS registered_customers",
    "cypher_time_llm_gen": 1.6591172920016106,
    "cypher_answer": "[{'registered_customers': 0}]",
    "cypher_time_exec": 0.038562791000003926,
    "id": "6273428e-a53e-4559-8fdd-9af06df6a045",
    "query": "How many customers are registered with the branch located at '123 Finance St'?"
  },
  {
    "cypher_command": "MATCH (lt:LoanTypes)<-[:HAS_LOAN_TYPE]-(l:Loans)\nWITH lt, AVG(l.interest_rate) AS avg_interest_rate\nWHERE avg_interest_rate < 3.5\nRETURN COUNT(lt) AS loan_type_count",
    "cypher_time_llm_gen": 1.9563832499989076,
    "cypher_answer": "[{'loan_type_count': 0}]",
    "cypher_time_exec": 0.05120966600225074,
    "id": "e1b07a8a-44d1-4b5c-9318-dc3f42eac30b",
    "query": "How many loan types have an average interest rate below 3.5%?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWHERE date().year - date(c.date_of_birth).year < 30\nRETURN SUM(a.account_balance) AS total_account_balance",
    "cypher_time_llm_gen": 1.6975419169975794,
    "cypher_answer": "[{'total_account_balance': 3100773.56}]",
    "cypher_time_exec": 0.052318708003440406,
    "id": "30efa799-043e-45f0-bf4e-f1fc82996cb7",
    "query": "What is the total account balance for customers under the age of 30?"
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWITH b, AVG(a.account_balance) AS avg_balance\nWHERE avg_balance > 25000\nRETURN COUNT(b) AS branch_count",
    "cypher_time_llm_gen": 2.1158081670000684,
    "cypher_answer": "[{'branch_count': 4}]",
    "cypher_time_exec": 0.05514487499749521,
    "id": "030f9044-5634-49ff-a190-7d1e8c06796c",
    "query": "How many branches have an average customer account balance greater than $25,000?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE card.is_blocked = false AND date(card.expiration_date) >= date('2030-01-01')\nRETURN count(card) AS active_cards_count",
    "cypher_time_llm_gen": 2.2093979169949307,
    "cypher_answer": "[{'active_cards_count': 7}]",
    "cypher_time_exec": 0.054528249995200895,
    "id": "35a5b582-51fd-4f6b-98dd-d2387342543a",
    "query": "Count the number of active (not blocked) cards that expire in or after the year 2030."
  },
  {
    "cypher_command": "MATCH (c:Customers)\nWHERE c.email ENDS WITH '@yahoo.com'\nRETURN COUNT(c) AS yahoo_customers_count",
    "cypher_time_llm_gen": 1.3755993750019115,
    "cypher_answer": "[{'yahoo_customers_count': 0}]",
    "cypher_time_exec": 0.019909082999220118,
    "id": "17ebb2a6-e42c-4008-905d-6df407851c3f",
    "query": "How many customers have a '@yahoo.com' email address?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH c, SUM(l.balance) AS total_loan_balance, \n     SUM(a.account_balance) + SUM(d.balance) AS total_account_deposit_balance\nWHERE total_loan_balance > total_account_deposit_balance\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 2.4349709579983028,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.06802495799638564,
    "id": "6daba985-2483-43b8-8807-82aae339f9e3",
    "query": "How many customers have a total loan balance that is higher than their combined total balance from accounts and deposits?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE date(l.created_at) <= date(a.created_at) + duration('P60D')\nRETURN count(DISTINCT c) AS first_time_loan_customers",
    "cypher_time_llm_gen": 3.106562832996133,
    "cypher_answer": "[{'first_time_loan_customers': 101}]",
    "cypher_time_exec": 0.07353687499562511,
    "id": "cbc347e3-5c65-4033-9093-f48170d4c224",
    "query": "How many customers took out their first loan within 60 days of opening their first account?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, COUNT(DISTINCT l.loan_type_id) AS loanCategoryCount\nWHERE loanCategoryCount >= 3\nRETURN COUNT(c) AS activeCustomersWithMultipleLoanCategories",
    "cypher_time_llm_gen": 2.4921890830009943,
    "cypher_answer": "[{'activeCustomersWithMultipleLoanCategories': 17}]",
    "cypher_time_exec": 0.04317495899886126,
    "id": "c10ff004-b58f-457f-83da-bb441a702c41",
    "query": "Count the number of customers who hold active loans from three or more different loan categories."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE t.transaction_amount > a.account_balance\nRETURN COUNT(DISTINCT c) AS single_transaction_customers",
    "cypher_time_llm_gen": 1.8669716250005877,
    "cypher_answer": "[{'single_transaction_customers': 29}]",
    "cypher_time_exec": 0.047491457997239195,
    "id": "bbf57fdc-16c2-45f3-a5e7-427d9ffab96b",
    "query": "How many customers have made a single transaction that was larger than their current total account balance?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE date(t.transaction_date) >= date({ year: date().year - 1, month: 1, day: 1 }) \n  AND date(t.transaction_date) < date({ year: date().year, month: 1, day: 1 })\nWITH c, COUNT(DISTINCT date(t.transaction_date)) AS months\nWHERE months = 12\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 2.9545494579942897,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.06662520799727645,
    "id": "4aee0d54-1ab8-4f6e-b266-0bedfa8f250a",
    "query": "How many customers made at least one transaction in every month of the previous calendar year?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH c, AVG(d.interest_rate) AS avg_deposit_interest_rate, l.interest_rate AS loan_interest_rate\nWHERE loan_interest_rate > avg_deposit_interest_rate\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.465574000001652,
    "cypher_answer": "[{'customer_count': 54}]",
    "cypher_time_exec": 0.053109791995666455,
    "id": "3730a8f7-2e9f-4342-bb06-18e6bb45c5cc",
    "query": "How many customers have a loan with an interest rate higher than the average deposit interest rate at their branch?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts),\n      (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans),\n      (c)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE date(a.created_at) >= date({ year: date().year, month: 1, day: 1 }) AND \n      date(l.created_at) >= date({ year: date().year, month: 1, day: 1 }) AND \n      date(card.created_at) >= date({ year: date().year, month: 1, day: 1 })\nRETURN count(DISTINCT c) AS numberOfCustomers",
    "cypher_time_llm_gen": 2.677971290999267,
    "cypher_answer": "[{'numberOfCustomers': 58}]",
    "cypher_time_exec": 0.09098970899503911,
    "id": "9c86b5fa-15df-4599-ae04-51edae950609",
    "query": "Find the number of customers who opened an account, took a loan, and got a card all within the same calendar year."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH c, \n     COUNT(CASE WHEN date(t.transaction_date) >= date({ year: date().year, month: date().month - 1, day: 1 }) THEN 1 END) AS last_month_count,\n     COUNT(CASE WHEN date(t.transaction_date) >= date({ year: date().year, month: date().month - 2, day: 1 }) AND date(t.transaction_date) < date({ year: date().year, month: date().month - 1, day: 1 }) THEN 1 END) AS month_before_last_count\nWHERE last_month_count >= 2 * month_before_last_count\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 7.790081792001729,
    "cypher_answer": "[{'customer_count': 143}]",
    "cypher_time_exec": 0.09741516600479372,
    "id": "61414436-89fd-4334-8b90-fdc9c88313d4",
    "query": "Count customers whose transaction count increased by 100% from the month before last to last month."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE l.loan_type_id = 'Mortgage' AND c.account_balance < (l.balance / toInteger(l.payment_term))\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 2.668042958001024,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.04541958300251281,
    "id": "cfed2afc-4fa1-4f59-b097-6e95ba474596",
    "query": "How many customers have a 'Mortgage' where their total account balance is less than a single monthly payment (balance/payment_term)?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions) \nWITH c, date(t.transaction_date) AS trans_date \nORDER BY trans_date \nWITH c, trans_date, COLLECT(trans_date) AS dates \nWHERE SIZE(dates) > 5 AND ALL(i IN RANGE(0, SIZE(dates)-2) WHERE date(dates[i]) + duration('P1D') = date(dates[i+1])) \nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 8.332254249995458,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.10281737500190502,
    "query": "Find the number of customers who have made transactions on more than 5 consecutive days.",
    "id": "7f4a4704-b4d5-40fc-92a0-9bac975322cb"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, SUM(toInteger(d.term)) AS totalDepositTerm, SUM(toInteger(l.payment_term)) AS totalLoanPaymentTerm\nWHERE totalDepositTerm > totalLoanPaymentTerm\nRETURN COUNT(c) AS customersCount",
    "cypher_time_llm_gen": 2.9795093330030795,
    "cypher_answer": "[{'customersCount': 0}]",
    "cypher_time_exec": 0.06852341600460932,
    "id": "e38568f2-4ef2-4c2d-bbff-e48788fb44f6",
    "query": "How many customers' total deposit term (sum of months) is greater than their total loan payment term (sum of months)?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l1:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(l2:Loans)\nWHERE l1.loan_id <> l2.loan_id AND l1.loan_type_id <> l2.loan_type_id\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 3.5202779579994967,
    "cypher_answer": "[{'customer_count': 48}]",
    "cypher_time_exec": 0.06561099999817088,
    "id": "7a53e634-1ca1-4a0b-ab17-e7f0eca1d0a3",
    "query": "Count customers whose second loan was of a different type than their first ever loan."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nMATCH (a)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH c, a, SUM(t.transaction_amount) AS total_transaction_value, MIN(a.created_at) AS oldest_account_date\nWHERE total_transaction_value > 20 * a.account_balance AND date(a.created_at) = date(oldest_account_date)\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 3.31396670799586,
    "cypher_answer": "[{'customer_count': 24}]",
    "cypher_time_exec": 0.07096795799589017,
    "id": "5e50406b-7b38-4586-836a-168a66dd6d18",
    "query": "How many customers have a total transaction value that's over 20 times the balance of their oldest account?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nMATCH (b:Customers)<-[:BELONGS_TO_BRANCH]-(c)\nWITH c, AVG(a.account_balance) AS avg_balance\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE card.balance > avg_balance\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 1.3155009170004632,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.05859549999877345,
    "id": "1383308a-f033-400b-841d-393e89846f86",
    "query": "How many customers have a card balance that is greater than the average account balance of all customers in their branch?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH c, t\nORDER BY t.transaction_date\nWITH c, collect(t.transaction_amount) AS amounts\nWHERE size(amounts) >= 4 AND all(i IN range(0, size(amounts)-2) WHERE amounts[i] < amounts[i+1])\nRETURN count(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.9605735829973128,
    "cypher_answer": "[{'customer_count': 2}]",
    "cypher_time_exec": 0.07763579200400272,
    "id": "5011a56f-79f9-4808-a372-b23420a8856c",
    "query": "Count customers with a trend of at least 4 consecutively increasing transaction amounts."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE date(l.start_date).dayOfWeek = date(c.date_of_birth).dayOfWeek\nRETURN count(c) AS customer_count",
    "cypher_time_llm_gen": 2.0582351669945638,
    "cypher_answer": "[{'customer_count': 33}]",
    "cypher_time_exec": 0.050699624996923376,
    "id": "1c35c086-2ddf-4fa0-8ce6-8588e2f4edb6",
    "query": "How many customers have a loan that started on the same day of the week they were born?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l1:Loans), \n      (c)<-[:BELONGS_TO_CUSTOMER]-(l2:Loans), \n      (c)<-[:BELONGS_TO_CUSTOMER]-(l3:Loans)\nWHERE l1.loan_id < l2.loan_id AND l2.loan_id < l3.loan_id \n  AND duration.between(date(l2.created_at), date(l3.created_at)).months < duration.between(date(l1.created_at), date(l2.created_at)).months\nRETURN count(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 3.805956583993975,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.08392212499893503,
    "id": "669bfce6-330e-479e-b218-33812c7e62e8",
    "query": "Count customers where the time gap between their 2nd and 3rd loan was shorter than between their 1st and 2nd."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, SUM(d.balance) AS total_savings, SUM(l.balance) AS total_auto_loans\nWHERE total_savings > total_auto_loans\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 2.791609874999267,
    "cypher_answer": "[{'customer_count': 90}]",
    "cypher_time_exec": 0.050674999998591375,
    "id": "bf166cd2-70df-4640-9498-2b4195c2c95a",
    "query": "How many customers have a greater total balance in 'Savings' deposits than in 'Auto' loans?"
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nMATCH (b)<-[:BELONGS_TO_BRANCH]-(c2:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH b, SUM(l.balance) AS total_loan_balance, SUM(d.balance) AS total_deposit_balance\nWHERE total_loan_balance > 3 * total_deposit_balance\nRETURN COUNT(b) AS branch_count",
    "cypher_time_llm_gen": 3.1125853749981616,
    "cypher_answer": "[{'branch_count': 0}]",
    "cypher_time_exec": 0.062094708999211434,
    "id": "034a0ece-b298-4dc5-a97a-708decd04dfb",
    "query": "Count the number of branches where the total loan balance is more than three times the total deposit balance."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE date(t.transaction_date).dayOfWeek = 5\nWITH c, count(t) AS transaction_count\nWITH c, transaction_count, \n     max(transaction_count) AS max_count\nWHERE transaction_count = max_count\nRETURN count(DISTINCT c) AS customers_with_friday_transactions",
    "cypher_time_llm_gen": 2.9107559169933666,
    "cypher_answer": "[{'customers_with_friday_transactions': 77}]",
    "cypher_time_exec": 0.05717549999826588,
    "id": "d35ae2ee-5887-425a-bf95-e7657865688b",
    "query": "How many customers' most frequent transaction day of the week is Friday?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE toInteger(d.term) > (date().year * 12 + date().month) - (date(c.date_of_birth).year * 12 + date(c.date_of_birth).month)\nRETURN count(distinct c) AS customer_count",
    "cypher_time_llm_gen": 2.0898470000029192,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.06543758299812907,
    "id": "b5064d57-8979-4226-ac1c-8837af068b9b",
    "query": "Count customers who have a deposit whose term in months is greater than their age in months when the deposit started."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH c, COUNT(d) AS depositCount\nMATCH (d:Deposits)\nWITH c, depositCount, COUNT(d) AS totalDeposits\nWHERE depositCount = totalDeposits\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 2.817082957997627,
    "cypher_answer": "[{'customerCount': 0}]",
    "cypher_time_exec": 0.053644250001525506,
    "id": "1c79da5b-8515-43b2-bc7f-b2e1a83b2fbd",
    "query": "How many customers hold every single type of deposit the bank offers?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions) \nWITH c, AVG(t.transaction_amount) AS avg_amount \nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(a2:Accounts)<-[:HAS_TRANSACTION]-(t2:Transactions) \nWITH c, avg_amount, t2, MAX(t2.transaction_date) AS max_date \nWHERE t2.transaction_date = max_date \nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 4.886177583000972,
    "cypher_answer": "[{'customer_count': 152}]",
    "cypher_time_exec": 0.06382112499704817,
    "query": "Count customers whose most recent transaction was for a lower amount than their overall average transaction amount.",
    "id": "0f6f4718-5983-41cb-a3f0-6bf11272fa49"
  },
  {
    "cypher_command": "MATCH (c:Customers)\nWITH c.address AS address, COUNT(DISTINCT c.customer_id) AS customer_count\nWHERE customer_count >= 2\nRETURN COUNT(DISTINCT address) AS unique_address_count",
    "cypher_time_llm_gen": 2.8042532920007943,
    "cypher_answer": "[{'unique_address_count': 0}]",
    "cypher_time_exec": 0.04199762499774806,
    "id": "7c820db4-238f-4e9c-9121-eccbfb0a8c25",
    "query": "How many unique addresses are shared by two or more customers?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH c, \n     COUNT(CASE WHEN date(t.transaction_date).dayOfWeek IN [6, 7] THEN 1 END) AS weekend_count,\n     COUNT(CASE WHEN date(t.transaction_date).dayOfWeek IN [1, 2, 3, 4, 5] THEN 1 END) AS weekday_count\nWHERE weekend_count > weekday_count\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 3.2898819589972845,
    "cypher_answer": "[{'customer_count': 13}]",
    "cypher_time_exec": 0.0654917089996161,
    "id": "ff9aa417-17aa-491c-9a4a-d1fa361a66e9",
    "query": "Count customers who make more transactions on weekends (Sat, Sun) than on weekdays (Mon-Fri)."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWITH c, l, card\nWHERE date(card.expiration_date) = date(l.end_date)\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 2.6410087090043817,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.048907415999565274,
    "id": "81cb353f-1b17-4aad-8390-d3d52884f7de",
    "query": "How many customers have a card expiring in the same month and year as their oldest loan's end date?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH c, SUM(l.balance) AS total_loans, COUNT(a) + COUNT(d) AS total_accounts_deposits\nWHERE total_accounts_deposits > 0 AND (total_loans / total_accounts_deposits) > 0.9\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 3.2305104580009356,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.056230666996270884,
    "id": "494cc3b6-1068-46d3-99a5-0ee9b34e7b7f",
    "query": "How many customers have a loan-to-assets ratio (total loans / total accounts+deposits) greater than 0.9?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions) \nWITH c, AVG(t.transaction_amount) AS avgTransactionAmount, MAX(t.transaction_amount) AS maxTransactionAmount \nWHERE maxTransactionAmount <= avgTransactionAmount \nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 4.233051292001619,
    "cypher_answer": "[{'customerCount': 9}]",
    "cypher_time_exec": 0.05864158299664268,
    "query": "Count customers who have never made a transaction larger than the bank's overall average transaction amount.",
    "id": "1a31e4b4-1934-4be5-a0b7-5a13b3fc30d7"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWHERE d.balance > 0 AND a.account_balance < 0\nRETURN COUNT(DISTINCT c) AS active_customers_with_overdrawn_accounts",
    "cypher_time_llm_gen": 3.2334131659954437,
    "cypher_answer": "[{'active_customers_with_overdrawn_accounts': 12}]",
    "cypher_time_exec": 0.07609554199734703,
    "id": "c2c8cb55-0f92-4528-9f78-1ded6b928f71",
    "query": "How many customers have active deposits but all of their checking/savings accounts are overdrawn?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, COUNT(DISTINCT a) AS accountCount, COUNT(DISTINCT l) AS loanCount\nWHERE accountCount = loanCount\nRETURN COUNT(DISTINCT c) AS customerCount",
    "cypher_time_llm_gen": 2.5191637919997447,
    "cypher_answer": "[{'customerCount': 35}]",
    "cypher_time_exec": 0.04133570800331654,
    "id": "e3a403f8-68b7-4e85-9035-b27bb450e876",
    "query": "How many customers have at least one loan for every account they hold?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWHERE date(a.created_at) <= date().year - 10\nWITH c, COUNT(DISTINCT a) AS accountCount\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, accountCount, COUNT(DISTINCT l) AS loanCount\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH c, accountCount, loanCount, COUNT(DISTINCT d) AS depositCount\nWHERE accountCount + loanCount + depositCount >= 3\nRETURN COUNT(DISTINCT c) AS loyalCustomers",
    "cypher_time_llm_gen": 4.310741250003048,
    "cypher_answer": "[{'loyalCustomers': 0}]",
    "cypher_time_exec": 0.06466308300150558,
    "id": "c7d31fa2-cf8c-451d-a78a-d63d30a690dc",
    "query": "Count loyal customers: those with the bank over 10 years who have at least 3 product types (account, loan, card, deposit)."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(activeCard:Cards)\nWHERE card.is_blocked = true AND activeCard.is_blocked = false\nWITH c, SUM(CASE WHEN card.is_blocked THEN card.balance ELSE 0 END) AS blockedBalance, \n     SUM(CASE WHEN NOT activeCard.is_blocked THEN activeCard.balance ELSE 0 END) AS activeBalance\nWHERE blockedBalance > activeBalance\nRETURN COUNT(DISTINCT c) AS customerCount",
    "cypher_time_llm_gen": 3.751767917005054,
    "cypher_answer": "[{'customerCount': 8}]",
    "cypher_time_exec": 0.06282129200553754,
    "id": "65213ecf-3c99-4f5f-83b0-8f042fd6f1f1",
    "query": "How many customers have a higher total balance in blocked cards than in their active, unblocked cards?"
  },
  {
    "cypher_command": "MATCH (c1:Customers), (c2:Customers)\nWHERE c1.customer_name CONTAINS c2.customer_name AND c1.customer_id <> c2.customer_id\nRETURN COUNT(DISTINCT c1) AS customer_count",
    "cypher_time_llm_gen": 3.6957831250038,
    "cypher_answer": "[{'customer_count': 2}]",
    "cypher_time_exec": 0.06325537499651546,
    "id": "d333b22b-f74d-4542-96f2-8247fc6fd881",
    "query": "Count the number of customers whose full name is a substring of another customer's full name."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE date(c.date_of_birth) >= date({ year: date().year, month: date().month, day: 1 }) \n  AND date(c.date_of_birth) < date({ year: date().year, month: date().month + 1, day: 1 })\nWITH c, count(t) AS transaction_count\nWHERE transaction_count > 10\nRETURN count(c) AS customer_count",
    "cypher_time_llm_gen": 3.6177432500044233,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.07249979200423695,
    "id": "73e407f0-8f59-4e9d-90e3-523eb1bca70a",
    "query": "How many customers have a birthday this month and also made more than 10 transactions this month?"
  },
  {
    "cypher_command": "MATCH (c1:Customers), (c2:Customers)\nWHERE c1.customer_id <> c2.customer_id AND c1.customer_name = c2.customer_name AND c1.date_of_birth = c2.date_of_birth\nRETURN COUNT(*) AS suspected_duplicates",
    "cypher_time_llm_gen": 1.876203792002343,
    "cypher_answer": "[{'suspected_duplicates': 0}]",
    "cypher_time_exec": 0.054111083001771476,
    "id": "c459851b-10f2-449a-865a-067c8e052f44",
    "query": "How many customers are suspected duplicates, having the same name and date of birth as another customer?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:TRANSACTED]-(t:Transactions) WHERE date(t.transaction_date) >= date({ year: date().year - 1, month: 1, day: 1 }) WITH c, a, sum(t.transaction_amount) AS net_transactions WHERE a.account_balance > 2 * (a.account_balance - net_transactions) RETURN count(c) AS customers_more_than_doubled",
    "cypher_time_llm_gen": 4.577143666996562,
    "cypher_answer": "[{'customers_more_than_doubled': 0}]",
    "cypher_time_exec": 0.07733254199411022,
    "query": "How many customers more than doubled their total account balance over the last year from net transactions?",
    "id": "7b0593f8-a6ce-4e24-8fe9-bc8991c3942b"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE l.end_date > card.expiration_date\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.9476290829989011,
    "cypher_answer": "[{'customer_count': 51}]",
    "cypher_time_exec": 0.054570041997067165,
    "id": "fe0f884f-9d35-4e93-b9aa-220209b0532f",
    "query": "How many customers have at least one loan that will end after all of their cards have expired?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH l, c, percentileCont(l.interest_rate, 0.99) AS top1PercentInterestRate\nWHERE l.interest_rate >= top1PercentInterestRate\nRETURN COUNT(DISTINCT c) AS customerCount",
    "cypher_time_llm_gen": 2.158807166997576,
    "cypher_answer": "[{'customerCount': 126}]",
    "cypher_time_exec": 0.06274283299717354,
    "id": "447ff64b-90ba-4aa1-9a73-c8bc808ae65f",
    "query": "How many customers have a loan with an interest rate in the top 1% for that specific loan type?"
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)\nWITH b, c\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWITH b, c, a\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(d:Accounts)\nWITH b, c, a, d, min(c.date_of_birth) AS min_dob\nWHERE a.account_balance = d.account_balance AND c.date_of_birth = min_dob\nRETURN count(distinct b) AS branch_count",
    "cypher_time_llm_gen": 4.996434166001563,
    "cypher_answer": "[{'branch_count': 4}]",
    "cypher_time_exec": 0.07072154199704528,
    "query": "How many branches have their oldest customer as also their wealthiest customer by total account balance?",
    "id": "5932c9c4-b5c8-4ee2-a902-f63152f22c94"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE date(d.created_at) = date(l.start_date)\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 1.7312315840026713,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.058020916003442835,
    "id": "b9894da4-5198-4dd2-ad29-3fc3a03830a9",
    "query": "How many customers started a new deposit in the same month and year as their most recent loan began?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nMATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(n:Loans)\nWHERE date(n.start_date) < date(l.end_date)\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.6114947919995757,
    "cypher_answer": "[{'customer_count': 126}]",
    "cypher_time_exec": 0.055307540998910554,
    "id": "f47ff2ae-462c-432b-ae76-c8e73699f3aa",
    "query": "Count customers who have taken a new loan before their previous loan's official end date."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE date(t.transaction_date) >= date({ year: date().year - 1, month: 1, day: 1 }) \n  AND date(t.transaction_date) < date({ year: date().year, month: 1, day: 1 })\nWITH c, date(t.transaction_date) AS transaction_month, SUM(t.transaction_amount) AS monthly_total\nWHERE monthly_total >= 500\nWITH c, COUNT(DISTINCT transaction_month) AS months_count\nWHERE months_count = 12\nRETURN COUNT(c) AS customers_count",
    "cypher_time_llm_gen": 4.083652624998649,
    "cypher_answer": "[{'customers_count': 0}]",
    "cypher_time_exec": 0.07653320899407845,
    "id": "c10b890d-4347-4b18-b823-327fa6590a4c",
    "query": "How many customers maintained a total monthly transaction amount of at least $500 for every month of the past year?"
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH b, c, COLLECT(DISTINCT l.loan_type_id) AS loanTypes\nWITH b, loanTypes, COUNT(DISTINCT loanTypes) AS loanCount\nWHERE loanCount = 10\nRETURN COUNT(DISTINCT b) AS branchesWithAllLoanTypes",
    "cypher_time_llm_gen": 3.0298757500058855,
    "cypher_answer": "[{'branchesWithAllLoanTypes': 0}]",
    "cypher_time_exec": 0.05502641699422384,
    "id": "39ca1753-1026-4117-9ea4-b16155f76f50",
    "query": "How many branches have at least one customer who holds every single type of loan product?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.4937095420027617,
    "cypher_answer": "[{'customer_count': 66}]",
    "cypher_time_exec": 0.01681691699923249,
    "id": "16aaeb0c-a427-4c21-98bf-9f591c9bd865",
    "query": "Count the number of customers with deposits and cards."
  },
  {
    "cypher_command": "MATCH (d:Deposits)-[:HAS_DEPOSIT_TYPE]->(dt:DepositTypes)\nMATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE dt.deposit_type_id = 127\nRETURN COUNT(t) AS transaction_count",
    "cypher_time_llm_gen": 2.0860220000031404,
    "cypher_answer": "[{'transaction_count': 0}]",
    "cypher_time_exec": 0.046948374998464715,
    "id": "cede2e0a-0a75-4ef9-bab7-e23b7b69e71c",
    "query": "Count the number of transactions per deposit type with ID 127."
  },
  {
    "cypher_command": "MATCH (lt:LoanTypes)<-[:HAS_LOAN_TYPE]-(l:Loans)\nWHERE lt.loan_type_id = 127\nRETURN lt.type AS LoanType, COUNT(l) AS LoanCount",
    "cypher_time_llm_gen": 3.3459794579976005,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.012800915996194817,
    "id": "d4f7e70a-afb2-4fd8-a5b4-95cfa7a95783",
    "query": "Count the number of loans per loan type with ID 127."
  },
  {
    "cypher_command": "MATCH (d:Deposits)-[:HAS_DEPOSIT_TYPE]->(dt:DepositTypes)\nWHERE dt.deposit_type_id = 127\nRETURN COUNT(d) AS numberOfDeposits",
    "cypher_time_llm_gen": 1.5079685419987072,
    "cypher_answer": "[{'numberOfDeposits': 0}]",
    "cypher_time_exec": 0.021040416999312583,
    "id": "8eafad22-127b-4cb6-8545-5871ff5edc99",
    "query": "Count the number of deposits per deposit type with ID 127."
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH a, COUNT(t) AS transaction_count\nWHERE transaction_count > 2000\nRETURN COUNT(a) AS account_count",
    "cypher_time_llm_gen": 1.5653936250018887,
    "cypher_answer": "[{'account_count': 0}]",
    "cypher_time_exec": 0.02623358299751999,
    "id": "9747aee2-3cef-4877-9ccb-3a67ac1bef1a",
    "query": "Count the number of accounts with more than 2000 in transactions."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.6971335830021417,
    "cypher_answer": "[{'customer_count': 101}]",
    "cypher_time_exec": 0.061276374995941296,
    "id": "1e799dcf-4b0f-4a4b-9b36-d697dd4c039b",
    "query": "Count the number of customers with accounts and loans."
  },
  {
    "cypher_command": "MATCH (t:Transactions) WHERE t.transaction_amount > 100 AND t.transaction_date >= timestamp() - 3 * 30 * 24 * 60 * 60 * 1000 RETURN count(t) AS transaction_count",
    "cypher_time_llm_gen": 3.6431744579967926,
    "cypher_answer": "[{'transaction_count': 0}]",
    "cypher_time_exec": 0.024442041998554487,
    "query": "Count the number of transactions with amount above 100 in the last 3 months.",
    "id": "73207eee-5371-4929-b5d7-3a0c897138de"
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE a.account_id = 128\nRETURN COUNT(t) AS transaction_count",
    "cypher_time_llm_gen": 1.4053925839980366,
    "cypher_answer": "[{'transaction_count': 4}]",
    "cypher_time_exec": 0.02218512499530334,
    "id": "aac8812d-f565-4db8-877b-5ff3f4959eba",
    "query": "Count the number of transactions per account with ID 128."
  },
  {
    "cypher_command": "MATCH (c:Customers {customer_id: 128})<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nRETURN count(d) AS number_of_deposits",
    "cypher_time_llm_gen": 1.260112999996636,
    "cypher_answer": "[{'number_of_deposits': 1}]",
    "cypher_time_exec": 0.021343499996874016,
    "id": "e25910c1-8ae1-4ece-8219-bf1325cec35d",
    "query": "Count the number of deposits per customer with ID 128."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE c.customer_id = 128\nRETURN COUNT(l) AS loan_count",
    "cypher_time_llm_gen": 3.0947811669975636,
    "cypher_answer": "[{'loan_count': 1}]",
    "cypher_time_exec": 0.036313958997197915,
    "id": "8889cefa-df9b-4adf-b425-94cda451cc77",
    "query": "Count the number of loans per customer with ID 128."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE c.customer_id = 128\nRETURN count(card) AS number_of_cards",
    "cypher_time_llm_gen": 1.2242917499970645,
    "cypher_answer": "[{'number_of_cards': 1}]",
    "cypher_time_exec": 0.042723082995507866,
    "id": "327be4b5-c2ef-47df-8d53-d1672df5268d",
    "query": "Count the number of cards per customer with ID 128."
  },
  {
    "cypher_command": "MATCH (b:Branches {branch_id: 128})<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nRETURN COUNT(a) AS account_count",
    "cypher_time_llm_gen": 1.5957804999998189,
    "cypher_answer": "[{'account_count': 0}]",
    "cypher_time_exec": 0.02387766700121574,
    "id": "e486bcf0-50c8-4592-adc5-6eb85ab51b86",
    "query": "Count the number of accounts per branch with ID 128."
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH b, AVG(t.transaction_amount) AS avg_amount\nMATCH (b)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE t.transaction_amount > avg_amount\nRETURN b.branch_id, COUNT(t) AS transaction_count",
    "cypher_time_llm_gen": 3.1207793749999837,
    "cypher_answer": "[{'b.branch_id': 1, 'transaction_count': 136}, {'b.branch_id': 2, 'transaction_count': 138}, {'b.branch_id': 3, 'transaction_count': 96}, {'b.branch_id': 4, 'transaction_count': 137}]",
    "cypher_time_exec": 0.0792245409975294,
    "id": "2f8cc0c1-f901-4192-bc54-a5fc932b91d6",
    "query": "Count the number of transactions with amount greater than average per branch."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits) \nWITH c, avg(d.balance) AS avg_balance, collect(d) AS deposits \nWHERE any(deposit IN deposits WHERE deposit.balance > avg_balance) \nRETURN c.customer_id, size(deposits) AS deposit_count",
    "cypher_time_llm_gen": 2.543144499999471,
    "cypher_answer": "[{'c.customer_id': 153, 'deposit_count': 2}, {'c.customer_id': 179, 'deposit_count': 3}, {'c.customer_id': 36, 'deposit_count': 2}, {'c.customer_id': 172, 'deposit_count': 2}, {'c.customer_id': 99, 'deposit_count': 2}, {'c.customer_id': 195, 'deposit_count': 2}, {'c.customer_id': 131, 'deposit_count': 4}, {'c.customer_id': 3, 'deposit_count': 4}, {'c.customer_id': 28, 'deposit_count': 4}, {'c.customer_id': 115, 'deposit_count': 2}, {'c.customer_id': 80, 'deposit_count': 2}, {'c.customer_id': 188, 'deposit_count': 2}, {'c.customer_id': 148, 'deposit_count': 2}, {'c.customer_id': 197, 'deposit_count': 2}, {'c.customer_id': 184, 'deposit_count': 2}, {'c.customer_id': 64, 'deposit_count': 2}, {'c.customer_id': 194, 'deposit_count': 2}, {'c.customer_id': 26, 'deposit_count': 2}, {'c.customer_id': 23, 'deposit_count': 2}, {'c.customer_id': 132, 'deposit_count': 2}, {'c.customer_id': 50, 'deposit_count': 2}, {'c.customer_id': 7, 'deposit_count': 3}, {'c.customer_id': 70, 'deposit_count': 2}, {'c.customer_id': 124, 'deposit_count': 2}, {'c.customer_id': 142, 'deposit_count': 2}, {'c.customer_id': 73, 'deposit_count': 2}, {'c.customer_id': 69, 'deposit_count': 5}, {'c.customer_id': 127, 'deposit_count': 3}, {'c.customer_id': 182, 'deposit_count': 2}, {'c.customer_id': 117, 'deposit_count': 2}, {'c.customer_id': 125, 'deposit_count': 2}, {'c.customer_id': 181, 'deposit_count': 3}, {'c.customer_id': 90, 'deposit_count': 2}, {'c.customer_id': 68, 'deposit_count': 2}, {'c.customer_id': 157, 'deposit_count': 2}, {'c.customer_id': 37, 'deposit_count': 2}, {'c.customer_id': 61, 'deposit_count': 2}, {'c.customer_id': 114, 'deposit_count': 2}, {'c.customer_id': 71, 'deposit_count': 2}, {'c.customer_id': 66, 'deposit_count': 3}, {'c.customer_id': 38, 'deposit_count': 2}, {'c.customer_id': 143, 'deposit_count': 2}, {'c.customer_id': 20, 'deposit_count': 4}, {'c.customer_id': 193, 'deposit_count': 2}, {'c.customer_id': 4, 'deposit_count': 3}, {'c.customer_id': 78, 'deposit_count': 2}, {'c.customer_id': 51, 'deposit_count': 2}, {'c.customer_id': 180, 'deposit_count': 2}, {'c.customer_id': 103, 'deposit_count': 2}, {'c.customer_id': 52, 'deposit_count': 2}, {'c.customer_id': 150, 'deposit_count': 2}, {'c.customer_id': 42, 'deposit_count': 2}]",
    "cypher_time_exec": 0.06579533400508808,
    "query": "Count the number of deposits with balance above average per customer type.",
    "id": "dcd75f18-28ba-4ae3-9f9e-6e70eaa2d39f"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWITH c, COUNT(a) AS accountCount\nWHERE accountCount > 3\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 2.105683041998418,
    "cypher_answer": "[{'customerCount': 12}]",
    "cypher_time_exec": 0.023702416001469828,
    "id": "fce39ee9-f16f-4760-ab30-d772a29f9c64",
    "query": "Count the number of customers with more than three accounts."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH c, COUNT(d) AS depositCount\nWHERE depositCount > 3\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 1.5380414160026703,
    "cypher_answer": "[{'customerCount': 5}]",
    "cypher_time_exec": 0.02297625000210246,
    "id": "c7823fc3-24c3-42c7-b0c7-03ca2c0b6efd",
    "query": "Count the number of customers with more than three deposits."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, COUNT(l) AS loanCount\nWHERE loanCount > 3\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 1.3837267499984591,
    "cypher_answer": "[{'customerCount': 4}]",
    "cypher_time_exec": 0.021804875002999324,
    "id": "a33a034e-6895-4c5b-b3e3-ebbd45ac3e78",
    "query": "Count the number of customers with more than three loans."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWITH c, COUNT(card) AS cardCount\nWHERE cardCount > 3\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 2.2557002089961316,
    "cypher_answer": "[{'customerCount': 3}]",
    "cypher_time_exec": 0.02126108299853513,
    "id": "fdf89cb4-55a1-4c5f-bfae-0455816f09ca",
    "query": "Count the number of customers with more than three cards."
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions) WHERE t.transaction_date >= timestamp() - 90 * 24 * 60 * 60 * 1000 RETURN a.account_id, count(t) AS transaction_count",
    "cypher_time_llm_gen": 2.9447969579996425,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.02704158299457049,
    "query": "Count the number of transactions in the last 90 days per account.",
    "id": "d2d53fb7-6a1d-4e98-8755-df52673d4902"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE toInteger(d.term) > 24\nRETURN count(d) AS numberOfDeposits",
    "cypher_time_llm_gen": 1.6100590830028523,
    "cypher_answer": "[{'numberOfDeposits': 0}]",
    "cypher_time_exec": 0.02572591699572513,
    "id": "56042188-d4db-4b99-a64d-dd688c43da35",
    "query": "Count the number of deposits with term greater than 24 months."
  },
  {
    "cypher_command": "MATCH (l:Loans)\nWHERE l.interest_rate > 7\nRETURN count(l) AS numberOfLoans",
    "cypher_time_llm_gen": 1.2010060419997899,
    "cypher_answer": "[{'numberOfLoans': 69}]",
    "cypher_time_exec": 0.014354250000906177,
    "id": "c889b26f-9320-478f-a320-c936cc74d358",
    "query": "Count the number of loans with interest rate above 7%."
  },
  {
    "cypher_command": "MATCH (t:Transactions)\nWHERE t.transaction_amount >= 1000 AND t.transaction_amount <= 5000\nRETURN COUNT(t) AS transaction_count",
    "cypher_time_llm_gen": 1.4811895839957288,
    "cypher_answer": "[{'transaction_count': 430}]",
    "cypher_time_exec": 0.021855082995898556,
    "id": "6445a657-3e5d-4364-a8fc-1b4e65935909",
    "query": "Count the number of transactions with amount between 1000 and 5000."
  },
  {
    "cypher_command": "MATCH (d:Deposits)\nWHERE date(d.start_date) > date('2022-12-31')\nRETURN count(d) AS numberOfDeposits",
    "cypher_time_llm_gen": 1.2873043750005309,
    "cypher_answer": "[{'numberOfDeposits': 200}]",
    "cypher_time_exec": 0.02145570799621055,
    "id": "5e1de881-b56e-4ead-9612-255be7327001",
    "query": "Count the number of deposits with start date after 2022."
  },
  {
    "cypher_command": "MATCH (l:Loans)\nWHERE date(l.end_date) < date('2024-01-01')\nRETURN count(l) AS numberOfLoans",
    "cypher_time_llm_gen": 1.9582862919996842,
    "cypher_answer": "[{'numberOfLoans': 0}]",
    "cypher_time_exec": 0.01813358399522258,
    "id": "9679c5cb-baee-40d6-bdc4-05f8a90ae238",
    "query": "Count the number of loans with end date before 2024."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWHERE date(a.created_at) >= date({ year: 2022, month: 1, day: 1 }) AND date(a.created_at) < date({ year: 2023, month: 1, day: 1 })\nRETURN count(c) AS customer_count",
    "cypher_time_llm_gen": 2.4009190420038067,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.024440542001684662,
    "id": "d8ec6476-d0ad-488a-83b2-175c0f294a7e",
    "query": "Count the number of customers with accounts created in 2022."
  },
  {
    "cypher_command": "MATCH (c:Customers {customer_id: 128})<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nRETURN count(t) AS transaction_count",
    "cypher_time_llm_gen": 1.8637876249995315,
    "cypher_answer": "[{'transaction_count': 0}]",
    "cypher_time_exec": 0.019842082998366095,
    "id": "0f381964-f9f6-4f3a-a214-d798353599cc",
    "query": "Count the number of transactions per customer with ID 128."
  },
  {
    "cypher_command": "MATCH (b:Branches {branch_id: 128})<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nRETURN COUNT(d) AS numberOfDeposits",
    "cypher_time_llm_gen": 1.8644857089966536,
    "cypher_answer": "[{'numberOfDeposits': 0}]",
    "cypher_time_exec": 0.018475041004421655,
    "id": "4fad9880-426f-42af-a18d-4104d555f163",
    "query": "Count the number of deposits per branch with ID 128."
  },
  {
    "cypher_command": "MATCH (b:Branches {branch_id: 128})<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nRETURN COUNT(l) AS numberOfLoansPerBranch",
    "cypher_time_llm_gen": 1.5717422089946922,
    "cypher_answer": "[{'numberOfLoansPerBranch': 0}]",
    "cypher_time_exec": 0.021265165996737778,
    "id": "3cbd5f3d-c603-4b13-be4c-7f40ac1e5a2b",
    "query": "Count the number of loans per branch with ID 128."
  },
  {
    "cypher_command": "MATCH (b:Branches {branch_id: 128})<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nRETURN COUNT(card) AS numberOfCardsPerBranch",
    "cypher_time_llm_gen": 1.454930959000194,
    "cypher_answer": "[{'numberOfCardsPerBranch': 0}]",
    "cypher_time_exec": 0.0175710830008029,
    "id": "d5fb14e0-3dc7-4cdc-b3de-5de47211ff31",
    "query": "Count the number of cards per branch with ID 128."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE t.transaction_amount > 2000\nRETURN c.customer_id, COUNT(t) AS transaction_count",
    "cypher_time_llm_gen": 1.9874643749935785,
    "cypher_answer": "[{'c.customer_id': 67, 'transaction_count': 7}, {'c.customer_id': 29, 'transaction_count': 5}, {'c.customer_id': 47, 'transaction_count': 2}, {'c.customer_id': 46, 'transaction_count': 2}, {'c.customer_id': 58, 'transaction_count': 11}, {'c.customer_id': 163, 'transaction_count': 6}, {'c.customer_id': 7, 'transaction_count': 4}, {'c.customer_id': 2, 'transaction_count': 3}, {'c.customer_id': 11, 'transaction_count': 2}, {'c.customer_id': 93, 'transaction_count': 6}, {'c.customer_id': 111, 'transaction_count': 1}, {'c.customer_id': 59, 'transaction_count': 4}, {'c.customer_id': 109, 'transaction_count': 3}, {'c.customer_id': 200, 'transaction_count': 4}, {'c.customer_id': 183, 'transaction_count': 3}, {'c.customer_id': 34, 'transaction_count': 6}, {'c.customer_id': 26, 'transaction_count': 4}, {'c.customer_id': 50, 'transaction_count': 1}, {'c.customer_id': 147, 'transaction_count': 4}, {'c.customer_id': 118, 'transaction_count': 4}, {'c.customer_id': 153, 'transaction_count': 5}, {'c.customer_id': 56, 'transaction_count': 3}, {'c.customer_id': 148, 'transaction_count': 2}, {'c.customer_id': 88, 'transaction_count': 6}, {'c.customer_id': 6, 'transaction_count': 5}, {'c.customer_id': 168, 'transaction_count': 4}, {'c.customer_id': 106, 'transaction_count': 3}, {'c.customer_id': 192, 'transaction_count': 6}, {'c.customer_id': 174, 'transaction_count': 4}, {'c.customer_id': 28, 'transaction_count': 3}, {'c.customer_id': 76, 'transaction_count': 2}, {'c.customer_id': 133, 'transaction_count': 3}, {'c.customer_id': 10, 'transaction_count': 3}, {'c.customer_id': 138, 'transaction_count': 2}, {'c.customer_id': 170, 'transaction_count': 8}, {'c.customer_id': 185, 'transaction_count': 1}, {'c.customer_id': 63, 'transaction_count': 1}, {'c.customer_id': 37, 'transaction_count': 8}, {'c.customer_id': 27, 'transaction_count': 3}, {'c.customer_id': 124, 'transaction_count': 1}, {'c.customer_id': 114, 'transaction_count': 2}, {'c.customer_id': 52, 'transaction_count': 2}, {'c.customer_id': 159, 'transaction_count': 1}, {'c.customer_id': 187, 'transaction_count': 2}, {'c.customer_id': 30, 'transaction_count': 4}, {'c.customer_id': 17, 'transaction_count': 5}, {'c.customer_id': 139, 'transaction_count': 2}, {'c.customer_id': 4, 'transaction_count': 2}, {'c.customer_id': 24, 'transaction_count': 1}, {'c.customer_id': 141, 'transaction_count': 1}, {'c.customer_id': 8, 'transaction_count': 4}, {'c.customer_id': 33, 'transaction_count': 3}, {'c.customer_id': 82, 'transaction_count': 3}, {'c.customer_id': 96, 'transaction_count': 2}, {'c.customer_id': 144, 'transaction_count': 2}, {'c.customer_id': 107, 'transaction_count': 3}, {'c.customer_id': 87, 'transaction_count': 2}, {'c.customer_id': 57, 'transaction_count': 1}, {'c.customer_id': 81, 'transaction_count': 1}, {'c.customer_id': 189, 'transaction_count': 1}, {'c.customer_id': 89, 'transaction_count': 1}, {'c.customer_id': 176, 'transaction_count': 1}, {'c.customer_id': 186, 'transaction_count': 2}, {'c.customer_id': 156, 'transaction_count': 3}, {'c.customer_id': 43, 'transaction_count': 2}, {'c.customer_id': 16, 'transaction_count': 1}, {'c.customer_id': 119, 'transaction_count': 2}, {'c.customer_id': 116, 'transaction_count': 2}, {'c.customer_id': 149, 'transaction_count': 3}, {'c.customer_id': 188, 'transaction_count': 1}, {'c.customer_id': 31, 'transaction_count': 2}, {'c.customer_id': 126, 'transaction_count': 1}, {'c.customer_id': 112, 'transaction_count': 1}, {'c.customer_id': 165, 'transaction_count': 1}, {'c.customer_id': 103, 'transaction_count': 2}, {'c.customer_id': 166, 'transaction_count': 1}, {'c.customer_id': 71, 'transaction_count': 2}, {'c.customer_id': 72, 'transaction_count': 2}, {'c.customer_id': 21, 'transaction_count': 1}, {'c.customer_id': 73, 'transaction_count': 7}, {'c.customer_id': 104, 'transaction_count': 2}, {'c.customer_id': 122, 'transaction_count': 3}, {'c.customer_id': 97, 'transaction_count': 1}, {'c.customer_id': 127, 'transaction_count': 3}, {'c.customer_id': 172, 'transaction_count': 7}, {'c.customer_id': 169, 'transaction_count': 1}, {'c.customer_id': 69, 'transaction_count': 1}, {'c.customer_id': 79, 'transaction_count': 2}, {'c.customer_id': 61, 'transaction_count': 1}, {'c.customer_id': 66, 'transaction_count': 4}, {'c.customer_id': 164, 'transaction_count': 1}, {'c.customer_id': 108, 'transaction_count': 2}, {'c.customer_id': 155, 'transaction_count': 2}, {'c.customer_id': 182, 'transaction_count': 1}, {'c.customer_id': 83, 'transaction_count': 2}, {'c.customer_id': 167, 'transaction_count': 2}, {'c.customer_id': 90, 'transaction_count': 4}, {'c.customer_id': 41, 'transaction_count': 3}, {'c.customer_id': 173, 'transaction_count': 2}, {'c.customer_id': 74, 'transaction_count': 2}, {'c.customer_id': 98, 'transaction_count': 1}, {'c.customer_id': 19, 'transaction_count': 2}, {'c.customer_id': 179, 'transaction_count': 2}, {'c.customer_id': 20, 'transaction_count': 1}, {'c.customer_id': 44, 'transaction_count': 4}, {'c.customer_id': 160, 'transaction_count': 1}, {'c.customer_id': 9, 'transaction_count': 2}, {'c.customer_id': 198, 'transaction_count': 1}, {'c.customer_id': 94, 'transaction_count': 2}, {'c.customer_id': 64, 'transaction_count': 2}, {'c.customer_id': 137, 'transaction_count': 2}, {'c.customer_id': 196, 'transaction_count': 3}, {'c.customer_id': 51, 'transaction_count': 1}, {'c.customer_id': 80, 'transaction_count': 1}, {'c.customer_id': 42, 'transaction_count': 1}, {'c.customer_id': 135, 'transaction_count': 2}, {'c.customer_id': 101, 'transaction_count': 2}, {'c.customer_id': 91, 'transaction_count': 1}, {'c.customer_id': 151, 'transaction_count': 1}, {'c.customer_id': 60, 'transaction_count': 1}, {'c.customer_id': 191, 'transaction_count': 1}, {'c.customer_id': 130, 'transaction_count': 1}]",
    "cypher_time_exec": 0.032093208996229805,
    "id": "5f03c0b3-b4b1-4e10-b8d1-70ec4b895faf",
    "query": "Count the number of transactions with amount greater than 2000 per customer."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE d.balance < 2000\nRETURN c.customer_id, COUNT(d) AS deposit_count",
    "cypher_time_llm_gen": 1.3010963749984512,
    "cypher_answer": "[{'c.customer_id': 64, 'deposit_count': 1}, {'c.customer_id': 157, 'deposit_count': 1}, {'c.customer_id': 52, 'deposit_count': 1}, {'c.customer_id': 42, 'deposit_count': 1}]",
    "cypher_time_exec": 0.022419082997657824,
    "id": "965d6e31-257c-4689-b537-cd48be6d3974",
    "query": "Count the number of deposits with balance below 2000 per customer."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE l.balance < 2000\nRETURN c.customer_id, COUNT(l) AS loan_count",
    "cypher_time_llm_gen": 1.2269361250000657,
    "cypher_answer": "[{'c.customer_id': 18, 'loan_count': 2}, {'c.customer_id': 81, 'loan_count': 3}, {'c.customer_id': 183, 'loan_count': 1}, {'c.customer_id': 174, 'loan_count': 1}, {'c.customer_id': 76, 'loan_count': 2}, {'c.customer_id': 94, 'loan_count': 1}, {'c.customer_id': 21, 'loan_count': 1}, {'c.customer_id': 189, 'loan_count': 2}, {'c.customer_id': 106, 'loan_count': 2}, {'c.customer_id': 198, 'loan_count': 3}, {'c.customer_id': 63, 'loan_count': 1}, {'c.customer_id': 28, 'loan_count': 4}, {'c.customer_id': 70, 'loan_count': 1}, {'c.customer_id': 150, 'loan_count': 1}, {'c.customer_id': 111, 'loan_count': 1}, {'c.customer_id': 42, 'loan_count': 2}, {'c.customer_id': 15, 'loan_count': 3}, {'c.customer_id': 59, 'loan_count': 2}, {'c.customer_id': 52, 'loan_count': 4}, {'c.customer_id': 112, 'loan_count': 2}, {'c.customer_id': 24, 'loan_count': 1}, {'c.customer_id': 80, 'loan_count': 3}, {'c.customer_id': 10, 'loan_count': 1}, {'c.customer_id': 43, 'loan_count': 3}, {'c.customer_id': 200, 'loan_count': 3}, {'c.customer_id': 138, 'loan_count': 2}, {'c.customer_id': 71, 'loan_count': 2}, {'c.customer_id': 188, 'loan_count': 3}, {'c.customer_id': 128, 'loan_count': 1}, {'c.customer_id': 116, 'loan_count': 1}, {'c.customer_id': 120, 'loan_count': 3}, {'c.customer_id': 103, 'loan_count': 1}, {'c.customer_id': 165, 'loan_count': 1}, {'c.customer_id': 14, 'loan_count': 1}, {'c.customer_id': 45, 'loan_count': 1}, {'c.customer_id': 140, 'loan_count': 3}, {'c.customer_id': 173, 'loan_count': 3}, {'c.customer_id': 108, 'loan_count': 2}, {'c.customer_id': 96, 'loan_count': 3}, {'c.customer_id': 68, 'loan_count': 1}, {'c.customer_id': 177, 'loan_count': 1}, {'c.customer_id': 61, 'loan_count': 1}, {'c.customer_id': 4, 'loan_count': 2}, {'c.customer_id': 11, 'loan_count': 2}, {'c.customer_id': 168, 'loan_count': 4}, {'c.customer_id': 101, 'loan_count': 1}, {'c.customer_id': 62, 'loan_count': 1}, {'c.customer_id': 69, 'loan_count': 2}, {'c.customer_id': 132, 'loan_count': 1}, {'c.customer_id': 88, 'loan_count': 1}, {'c.customer_id': 185, 'loan_count': 3}, {'c.customer_id': 133, 'loan_count': 2}, {'c.customer_id': 147, 'loan_count': 1}, {'c.customer_id': 16, 'loan_count': 1}, {'c.customer_id': 100, 'loan_count': 2}, {'c.customer_id': 184, 'loan_count': 1}, {'c.customer_id': 156, 'loan_count': 1}, {'c.customer_id': 19, 'loan_count': 2}, {'c.customer_id': 72, 'loan_count': 1}, {'c.customer_id': 121, 'loan_count': 3}, {'c.customer_id': 50, 'loan_count': 1}, {'c.customer_id': 180, 'loan_count': 3}, {'c.customer_id': 158, 'loan_count': 2}, {'c.customer_id': 23, 'loan_count': 1}, {'c.customer_id': 127, 'loan_count': 1}, {'c.customer_id': 170, 'loan_count': 2}, {'c.customer_id': 83, 'loan_count': 1}, {'c.customer_id': 143, 'loan_count': 3}, {'c.customer_id': 51, 'loan_count': 2}, {'c.customer_id': 44, 'loan_count': 2}, {'c.customer_id': 107, 'loan_count': 2}, {'c.customer_id': 155, 'loan_count': 4}, {'c.customer_id': 146, 'loan_count': 1}, {'c.customer_id': 98, 'loan_count': 1}, {'c.customer_id': 86, 'loan_count': 2}, {'c.customer_id': 196, 'loan_count': 1}, {'c.customer_id': 109, 'loan_count': 1}, {'c.customer_id': 137, 'loan_count': 1}, {'c.customer_id': 167, 'loan_count': 2}, {'c.customer_id': 162, 'loan_count': 3}, {'c.customer_id': 164, 'loan_count': 2}, {'c.customer_id': 117, 'loan_count': 2}, {'c.customer_id': 8, 'loan_count': 1}, {'c.customer_id': 78, 'loan_count': 1}, {'c.customer_id': 75, 'loan_count': 1}, {'c.customer_id': 77, 'loan_count': 2}, {'c.customer_id': 159, 'loan_count': 1}, {'c.customer_id': 110, 'loan_count': 1}, {'c.customer_id': 30, 'loan_count': 1}, {'c.customer_id': 13, 'loan_count': 1}, {'c.customer_id': 47, 'loan_count': 1}, {'c.customer_id': 193, 'loan_count': 1}, {'c.customer_id': 48, 'loan_count': 1}, {'c.customer_id': 82, 'loan_count': 2}, {'c.customer_id': 3, 'loan_count': 1}, {'c.customer_id': 135, 'loan_count': 1}, {'c.customer_id': 142, 'loan_count': 1}, {'c.customer_id': 6, 'loan_count': 2}, {'c.customer_id': 130, 'loan_count': 1}, {'c.customer_id': 176, 'loan_count': 1}, {'c.customer_id': 148, 'loan_count': 1}, {'c.customer_id': 179, 'loan_count': 1}, {'c.customer_id': 181, 'loan_count': 1}, {'c.customer_id': 9, 'loan_count': 1}, {'c.customer_id': 17, 'loan_count': 1}, {'c.customer_id': 49, 'loan_count': 2}, {'c.customer_id': 38, 'loan_count': 1}, {'c.customer_id': 153, 'loan_count': 1}, {'c.customer_id': 66, 'loan_count': 2}, {'c.customer_id': 169, 'loan_count': 1}, {'c.customer_id': 34, 'loan_count': 1}, {'c.customer_id': 33, 'loan_count': 1}, {'c.customer_id': 73, 'loan_count': 1}, {'c.customer_id': 90, 'loan_count': 1}, {'c.customer_id': 60, 'loan_count': 1}, {'c.customer_id': 123, 'loan_count': 1}, {'c.customer_id': 95, 'loan_count': 1}, {'c.customer_id': 161, 'loan_count': 1}, {'c.customer_id': 22, 'loan_count': 1}, {'c.customer_id': 35, 'loan_count': 1}, {'c.customer_id': 36, 'loan_count': 1}, {'c.customer_id': 55, 'loan_count': 1}, {'c.customer_id': 154, 'loan_count': 1}, {'c.customer_id': 197, 'loan_count': 1}, {'c.customer_id': 149, 'loan_count': 1}, {'c.customer_id': 186, 'loan_count': 1}]",
    "cypher_time_exec": 0.03025645799789345,
    "id": "05bc8955-e926-4d4c-b4e5-8936f31854b7",
    "query": "Count the number of loans with balance below 2000 per customer."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE date(card.expiration_date) < date('2024-01-01')\nRETURN c.customer_id, COUNT(card) AS expiring_cards_count",
    "cypher_time_llm_gen": 2.096924790996127,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.02478504199825693,
    "id": "0d1172a4-f608-4b6f-8a70-3a997d76a921",
    "query": "Count the number of cards expiring before 2024 per customer."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE date(t.transaction_date) >= date({ year: date().year, month: 1, day: 1 })\nRETURN count(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.8184799579976243,
    "cypher_answer": "[{'customer_count': 81}]",
    "cypher_time_exec": 0.030343999998876825,
    "id": "5097e9cb-72b5-40e4-84f4-48b4854f690f",
    "query": "Count the number of customers with transactions in 2023."
  },
  {
    "cypher_command": "MATCH (d:Deposits)\nWHERE toInteger(d.term) >= 12 AND toInteger(d.term) <= 24\nRETURN count(d) AS deposit_count",
    "cypher_time_llm_gen": 1.5034502499984228,
    "cypher_answer": "[{'deposit_count': 0}]",
    "cypher_time_exec": 0.03242554199823644,
    "id": "97ee289d-5d07-4b41-bdb3-07afdf4fcde6",
    "query": "Count the number of deposits with term between 12 and 24 months."
  },
  {
    "cypher_command": "MATCH (l:Loans)\nWHERE toInteger(l.payment_term) >= 24 AND toInteger(l.payment_term) <= 36\nRETURN count(l) AS loan_count",
    "cypher_time_llm_gen": 1.6074181660005706,
    "cypher_answer": "[{'loan_count': 0}]",
    "cypher_time_exec": 0.028772290999768302,
    "id": "cd2c8d94-0c83-43fe-8035-041ace667c8a",
    "query": "Count the number of loans with payment term between 24 and 36 months."
  },
  {
    "cypher_command": "MATCH (t:Transactions)\nWHERE date(t.updated_at) >= date() - duration('P60D')\nRETURN count(t) AS updated_transactions_count",
    "cypher_time_llm_gen": 1.5075264170009177,
    "cypher_answer": "[{'updated_transactions_count': 1000}]",
    "cypher_time_exec": 0.05494108299899381,
    "id": "481d3899-ce17-43bc-ba20-066805ddbb6b",
    "query": "Count the number of transactions updated in the last 60 days."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE d.balance > 2000\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.5735274999969988,
    "cypher_answer": "[{'customer_count': 131}]",
    "cypher_time_exec": 0.023827749995689373,
    "id": "5419c31d-8c4e-4ed3-a3de-5fbaad539f72",
    "query": "Count the number of customers with more than 2000 in deposits."
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions) WHERE t.transaction_date >= timestamp() - 60 * 24 * 60 * 60 * 1000 RETURN count(DISTINCT a) AS account_count",
    "cypher_time_llm_gen": 2.716905500004941,
    "cypher_answer": "[{'account_count': 0}]",
    "cypher_time_exec": 0.028965124998649117,
    "query": "Count the number of accounts with transactions in the last 60 days.",
    "id": "6d5e7717-25d3-48f5-b215-9cba1d367c2c"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits) WHERE d.end_date >= date() AND d.end_date < date() + duration('P3M') RETURN count(d) AS deposit_count",
    "cypher_time_llm_gen": 2.534390542001347,
    "cypher_answer": "[{'deposit_count': 4}]",
    "cypher_time_exec": 0.029079874999297317,
    "query": "Count the number of deposits with end date in the next 3 months.",
    "id": "ba0aaf8e-83ce-4444-815a-41942c07850d"
  },
  {
    "cypher_command": "MATCH (l:Loans)\nWHERE l.interest_rate >= 2 AND l.interest_rate <= 4\nRETURN COUNT(l) AS loan_count",
    "cypher_time_llm_gen": 1.550462458995753,
    "cypher_answer": "[{'loan_count': 45}]",
    "cypher_time_exec": 0.02227600000333041,
    "id": "d3503c49-5688-4a80-aba7-8f4bbc522239",
    "query": "Count the number of loans with interest rate between 2% and 4%."
  },
  {
    "cypher_command": "MATCH (d:Deposits)<-[:BELONGS_TO_CUSTOMER]-(c:Customers)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE d.deposit_type_id = 128\nRETURN COUNT(t) AS transaction_count",
    "cypher_time_llm_gen": 1.5145023330042022,
    "cypher_answer": "[{'transaction_count': 0}]",
    "cypher_time_exec": 0.02431816700118361,
    "id": "90be39ac-978e-4cda-a4e1-49b8da1d1395",
    "query": "Count the number of transactions per deposit type with ID 128."
  },
  {
    "cypher_command": "MATCH (l:Loans)-[:HAS_LOAN_TYPE]->(lt:LoanTypes)\nWHERE lt.loan_type_id = 128\nRETURN COUNT(l) AS numberOfLoans",
    "cypher_time_llm_gen": 1.2763157499939553,
    "cypher_answer": "[{'numberOfLoans': 0}]",
    "cypher_time_exec": 0.0171156249998603,
    "id": "aa087527-35a8-4c5c-a3e4-55afdc83eaa6",
    "query": "Count the number of loans per loan type with ID 128."
  },
  {
    "cypher_command": "MATCH (d:Deposits)-[:HAS_DEPOSIT_TYPE]->(dt:DepositTypes)\nWHERE dt.deposit_type_id = 128\nRETURN COUNT(d) AS numberOfDeposits",
    "cypher_time_llm_gen": 1.7194668329975684,
    "cypher_answer": "[{'numberOfDeposits': 0}]",
    "cypher_time_exec": 0.020664249997935258,
    "id": "f1c7d99d-e4dd-40dd-9fdc-54ad19d414a1",
    "query": "Count the number of deposits per deposit type with ID 128."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nRETURN COUNT(DISTINCT c.customer_id) AS unique_customers_with_active_loans_and_deposits",
    "cypher_time_llm_gen": 7.6048845409968635,
    "cypher_answer": "[{'unique_customers_with_active_loans_and_deposits': 90}]",
    "cypher_time_exec": 0.05329320800228743,
    "id": "63b316ce-4651-4ca6-8ff8-58cae6f340f2",
    "query": "Count the total number of unique customers with active loans and deposits."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE t.transaction_amount > 5000\nRETURN c.customer_id, COUNT(t) AS transaction_count",
    "cypher_time_llm_gen": 5.837625291998847,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.024762166998698376,
    "id": "dc124068-9e6b-40f7-830b-6dfb242ea76d",
    "query": "Count the number of transactions per customer with total amount over 5000."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH c, AVG(d.balance) AS avg_balance\nWHERE avg_balance > 2000\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 1.6147147090014187,
    "cypher_answer": "[{'customer_count': 131}]",
    "cypher_time_exec": 0.05143266700179083,
    "id": "2a740e1c-3c13-4dce-93cc-9783597ce819",
    "query": "Count the number of customers with average deposit balance above 2000."
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH a, SUM(t.transaction_amount) AS total_transactions\nWHERE total_transactions > 10000\nRETURN COUNT(a) AS account_count",
    "cypher_time_llm_gen": 1.6911524169991026,
    "cypher_answer": "[{'account_count': 12}]",
    "cypher_time_exec": 0.02626291699561989,
    "id": "20b1f5d2-35f1-4416-b190-8ed1574c86e2",
    "query": "Count the number of accounts with total transactions exceeding 10000."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE date(l.end_date) >= date('2025-01-01') AND date(l.end_date) < date('2026-01-01')\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.8441739580011927,
    "cypher_answer": "[{'customer_count': 11}]",
    "cypher_time_exec": 0.0609069170022849,
    "id": "b5f01b98-0d6a-4dd9-bc22-d5fd98dddefb",
    "query": "Count the number of customers with loans expiring in 2025."
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH b, d, avg(toInteger(d.term)) AS avg_term\nWHERE toInteger(d.term) > avg_term\nRETURN b.branch_id, count(d) AS deposit_count",
    "cypher_time_llm_gen": 2.6880620830052067,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.06329079200077103,
    "id": "1a24e92b-ef70-4183-8616-761d26e2839d",
    "query": "Count the number of deposits with term longer than average per branch."
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH a, AVG(t.transaction_amount) AS avg_amount, COUNT(t) AS transaction_count\nWHERE avg_amount > 500\nRETURN a.account_id, transaction_count",
    "cypher_time_llm_gen": 1.8671223330020439,
    "cypher_answer": "[{'a.account_id': 1, 'transaction_count': 3}, {'a.account_id': 4, 'transaction_count': 4}, {'a.account_id': 9, 'transaction_count': 2}, {'a.account_id': 12, 'transaction_count': 10}, {'a.account_id': 14, 'transaction_count': 1}, {'a.account_id': 15, 'transaction_count': 3}, {'a.account_id': 16, 'transaction_count': 5}, {'a.account_id': 19, 'transaction_count': 4}, {'a.account_id': 24, 'transaction_count': 1}, {'a.account_id': 25, 'transaction_count': 5}, {'a.account_id': 26, 'transaction_count': 1}, {'a.account_id': 27, 'transaction_count': 6}, {'a.account_id': 29, 'transaction_count': 3}, {'a.account_id': 32, 'transaction_count': 2}, {'a.account_id': 34, 'transaction_count': 3}, {'a.account_id': 35, 'transaction_count': 8}, {'a.account_id': 36, 'transaction_count': 4}, {'a.account_id': 41, 'transaction_count': 2}, {'a.account_id': 42, 'transaction_count': 2}, {'a.account_id': 43, 'transaction_count': 3}, {'a.account_id': 44, 'transaction_count': 3}, {'a.account_id': 47, 'transaction_count': 2}, {'a.account_id': 48, 'transaction_count': 1}, {'a.account_id': 49, 'transaction_count': 3}, {'a.account_id': 50, 'transaction_count': 2}, {'a.account_id': 53, 'transaction_count': 5}, {'a.account_id': 54, 'transaction_count': 6}, {'a.account_id': 57, 'transaction_count': 3}, {'a.account_id': 58, 'transaction_count': 1}, {'a.account_id': 59, 'transaction_count': 1}, {'a.account_id': 60, 'transaction_count': 3}, {'a.account_id': 66, 'transaction_count': 3}, {'a.account_id': 67, 'transaction_count': 7}, {'a.account_id': 69, 'transaction_count': 1}, {'a.account_id': 71, 'transaction_count': 4}, {'a.account_id': 72, 'transaction_count': 3}, {'a.account_id': 75, 'transaction_count': 5}, {'a.account_id': 77, 'transaction_count': 1}, {'a.account_id': 79, 'transaction_count': 5}, {'a.account_id': 81, 'transaction_count': 2}, {'a.account_id': 89, 'transaction_count': 2}, {'a.account_id': 90, 'transaction_count': 5}, {'a.account_id': 93, 'transaction_count': 4}, {'a.account_id': 94, 'transaction_count': 2}, {'a.account_id': 96, 'transaction_count': 2}, {'a.account_id': 99, 'transaction_count': 5}, {'a.account_id': 101, 'transaction_count': 4}, {'a.account_id': 109, 'transaction_count': 5}, {'a.account_id': 111, 'transaction_count': 3}, {'a.account_id': 117, 'transaction_count': 3}, {'a.account_id': 118, 'transaction_count': 1}, {'a.account_id': 119, 'transaction_count': 6}, {'a.account_id': 121, 'transaction_count': 2}, {'a.account_id': 122, 'transaction_count': 2}, {'a.account_id': 125, 'transaction_count': 1}, {'a.account_id': 126, 'transaction_count': 2}, {'a.account_id': 128, 'transaction_count': 4}, {'a.account_id': 129, 'transaction_count': 3}, {'a.account_id': 132, 'transaction_count': 3}, {'a.account_id': 135, 'transaction_count': 2}, {'a.account_id': 137, 'transaction_count': 3}, {'a.account_id': 138, 'transaction_count': 5}, {'a.account_id': 139, 'transaction_count': 3}, {'a.account_id': 141, 'transaction_count': 6}, {'a.account_id': 143, 'transaction_count': 5}, {'a.account_id': 146, 'transaction_count': 4}, {'a.account_id': 147, 'transaction_count': 3}, {'a.account_id': 150, 'transaction_count': 6}, {'a.account_id': 152, 'transaction_count': 6}, {'a.account_id': 162, 'transaction_count': 4}, {'a.account_id': 163, 'transaction_count': 4}, {'a.account_id': 165, 'transaction_count': 3}, {'a.account_id': 166, 'transaction_count': 2}, {'a.account_id': 173, 'transaction_count': 1}, {'a.account_id': 174, 'transaction_count': 4}, {'a.account_id': 178, 'transaction_count': 5}, {'a.account_id': 185, 'transaction_count': 3}, {'a.account_id': 186, 'transaction_count': 1}, {'a.account_id': 192, 'transaction_count': 6}, {'a.account_id': 194, 'transaction_count': 1}, {'a.account_id': 196, 'transaction_count': 7}, {'a.account_id': 197, 'transaction_count': 3}, {'a.account_id': 199, 'transaction_count': 4}, {'a.account_id': 204, 'transaction_count': 1}, {'a.account_id': 206, 'transaction_count': 5}, {'a.account_id': 212, 'transaction_count': 3}, {'a.account_id': 214, 'transaction_count': 3}, {'a.account_id': 216, 'transaction_count': 1}, {'a.account_id': 218, 'transaction_count': 5}, {'a.account_id': 222, 'transaction_count': 3}, {'a.account_id': 223, 'transaction_count': 3}, {'a.account_id': 224, 'transaction_count': 6}, {'a.account_id': 226, 'transaction_count': 1}, {'a.account_id': 228, 'transaction_count': 4}, {'a.account_id': 229, 'transaction_count': 4}, {'a.account_id': 230, 'transaction_count': 3}, {'a.account_id': 232, 'transaction_count': 2}, {'a.account_id': 235, 'transaction_count': 6}, {'a.account_id': 237, 'transaction_count': 11}, {'a.account_id': 242, 'transaction_count': 4}, {'a.account_id': 243, 'transaction_count': 4}, {'a.account_id': 244, 'transaction_count': 4}, {'a.account_id': 246, 'transaction_count': 3}, {'a.account_id': 247, 'transaction_count': 4}, {'a.account_id': 248, 'transaction_count': 4}, {'a.account_id': 250, 'transaction_count': 2}, {'a.account_id': 251, 'transaction_count': 3}, {'a.account_id': 252, 'transaction_count': 4}, {'a.account_id': 253, 'transaction_count': 7}, {'a.account_id': 254, 'transaction_count': 1}, {'a.account_id': 256, 'transaction_count': 4}, {'a.account_id': 259, 'transaction_count': 1}, {'a.account_id': 263, 'transaction_count': 1}, {'a.account_id': 268, 'transaction_count': 3}, {'a.account_id': 274, 'transaction_count': 3}, {'a.account_id': 275, 'transaction_count': 5}, {'a.account_id': 276, 'transaction_count': 2}, {'a.account_id': 278, 'transaction_count': 7}, {'a.account_id': 279, 'transaction_count': 5}, {'a.account_id': 280, 'transaction_count': 6}, {'a.account_id': 286, 'transaction_count': 4}, {'a.account_id': 287, 'transaction_count': 3}, {'a.account_id': 288, 'transaction_count': 3}, {'a.account_id': 295, 'transaction_count': 4}, {'a.account_id': 296, 'transaction_count': 4}, {'a.account_id': 297, 'transaction_count': 2}, {'a.account_id': 300, 'transaction_count': 2}]",
    "cypher_time_exec": 0.05520483400323428,
    "id": "849ef141-be0d-4b6e-a614-d26e4996f97d",
    "query": "Count the number of transactions per account with average amount above 500."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, SUM(l.balance) AS total_loan_balance\nWHERE total_loan_balance > 15000\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 1.6803905409979052,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.02554716599843232,
    "id": "89efa934-a011-4bb1-bc99-e5f702837f4b",
    "query": "Count the number of customers with total loan balance above 15000."
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH a, COUNT(t) AS transaction_count\nMATCH (b:Accounts)<-[:HAS_TRANSACTION]-(t2:Transactions)\nWITH a, transaction_count, COUNT(t2) AS branch_average\nWHERE transaction_count > branch_average\nRETURN COUNT(a) AS accounts_above_average",
    "cypher_time_llm_gen": 2.4368189169981633,
    "cypher_answer": "[{'accounts_above_average': 0}]",
    "cypher_time_exec": 0.11807654099538922,
    "id": "fcd5e8f9-ada0-4507-b4b7-530d9ed0f3d1",
    "query": "Count the number of accounts with more transactions than the branch average."
  },
  {
    "cypher_command": "MATCH (l:Loans)<-[:BELONGS_TO_CUSTOMER]-(c:Customers)-[:BELONGS_TO_BRANCH]->(b:Branches)\nWITH AVG(l.interest_rate) AS branch_average\nMATCH (l:Loans)\nWHERE l.interest_rate > branch_average\nRETURN COUNT(l) AS loans_above_average",
    "cypher_time_llm_gen": 2.0230201669983217,
    "cypher_answer": "[{'loans_above_average': 0}]",
    "cypher_time_exec": 0.04924666700389935,
    "id": "d592d366-39ff-471e-b120-22b3e3cb7f69",
    "query": "Count the number of loans with interest rate above branch average."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE t.transaction_amount > 2000\nRETURN c.customer_id, COUNT(t) AS transaction_count",
    "cypher_time_llm_gen": 2.413470125000458,
    "cypher_answer": "[{'c.customer_id': 67, 'transaction_count': 7}, {'c.customer_id': 29, 'transaction_count': 5}, {'c.customer_id': 47, 'transaction_count': 2}, {'c.customer_id': 46, 'transaction_count': 2}, {'c.customer_id': 58, 'transaction_count': 11}, {'c.customer_id': 163, 'transaction_count': 6}, {'c.customer_id': 7, 'transaction_count': 4}, {'c.customer_id': 2, 'transaction_count': 3}, {'c.customer_id': 11, 'transaction_count': 2}, {'c.customer_id': 93, 'transaction_count': 6}, {'c.customer_id': 111, 'transaction_count': 1}, {'c.customer_id': 59, 'transaction_count': 4}, {'c.customer_id': 109, 'transaction_count': 3}, {'c.customer_id': 200, 'transaction_count': 4}, {'c.customer_id': 183, 'transaction_count': 3}, {'c.customer_id': 34, 'transaction_count': 6}, {'c.customer_id': 26, 'transaction_count': 4}, {'c.customer_id': 50, 'transaction_count': 1}, {'c.customer_id': 147, 'transaction_count': 4}, {'c.customer_id': 118, 'transaction_count': 4}, {'c.customer_id': 153, 'transaction_count': 5}, {'c.customer_id': 56, 'transaction_count': 3}, {'c.customer_id': 148, 'transaction_count': 2}, {'c.customer_id': 88, 'transaction_count': 6}, {'c.customer_id': 6, 'transaction_count': 5}, {'c.customer_id': 168, 'transaction_count': 4}, {'c.customer_id': 106, 'transaction_count': 3}, {'c.customer_id': 192, 'transaction_count': 6}, {'c.customer_id': 174, 'transaction_count': 4}, {'c.customer_id': 28, 'transaction_count': 3}, {'c.customer_id': 76, 'transaction_count': 2}, {'c.customer_id': 133, 'transaction_count': 3}, {'c.customer_id': 10, 'transaction_count': 3}, {'c.customer_id': 138, 'transaction_count': 2}, {'c.customer_id': 170, 'transaction_count': 8}, {'c.customer_id': 185, 'transaction_count': 1}, {'c.customer_id': 63, 'transaction_count': 1}, {'c.customer_id': 37, 'transaction_count': 8}, {'c.customer_id': 27, 'transaction_count': 3}, {'c.customer_id': 124, 'transaction_count': 1}, {'c.customer_id': 114, 'transaction_count': 2}, {'c.customer_id': 52, 'transaction_count': 2}, {'c.customer_id': 159, 'transaction_count': 1}, {'c.customer_id': 187, 'transaction_count': 2}, {'c.customer_id': 30, 'transaction_count': 4}, {'c.customer_id': 17, 'transaction_count': 5}, {'c.customer_id': 139, 'transaction_count': 2}, {'c.customer_id': 4, 'transaction_count': 2}, {'c.customer_id': 24, 'transaction_count': 1}, {'c.customer_id': 141, 'transaction_count': 1}, {'c.customer_id': 8, 'transaction_count': 4}, {'c.customer_id': 33, 'transaction_count': 3}, {'c.customer_id': 82, 'transaction_count': 3}, {'c.customer_id': 96, 'transaction_count': 2}, {'c.customer_id': 144, 'transaction_count': 2}, {'c.customer_id': 107, 'transaction_count': 3}, {'c.customer_id': 87, 'transaction_count': 2}, {'c.customer_id': 57, 'transaction_count': 1}, {'c.customer_id': 81, 'transaction_count': 1}, {'c.customer_id': 189, 'transaction_count': 1}, {'c.customer_id': 89, 'transaction_count': 1}, {'c.customer_id': 176, 'transaction_count': 1}, {'c.customer_id': 186, 'transaction_count': 2}, {'c.customer_id': 156, 'transaction_count': 3}, {'c.customer_id': 43, 'transaction_count': 2}, {'c.customer_id': 16, 'transaction_count': 1}, {'c.customer_id': 119, 'transaction_count': 2}, {'c.customer_id': 116, 'transaction_count': 2}, {'c.customer_id': 149, 'transaction_count': 3}, {'c.customer_id': 188, 'transaction_count': 1}, {'c.customer_id': 31, 'transaction_count': 2}, {'c.customer_id': 126, 'transaction_count': 1}, {'c.customer_id': 112, 'transaction_count': 1}, {'c.customer_id': 165, 'transaction_count': 1}, {'c.customer_id': 103, 'transaction_count': 2}, {'c.customer_id': 166, 'transaction_count': 1}, {'c.customer_id': 71, 'transaction_count': 2}, {'c.customer_id': 72, 'transaction_count': 2}, {'c.customer_id': 21, 'transaction_count': 1}, {'c.customer_id': 73, 'transaction_count': 7}, {'c.customer_id': 104, 'transaction_count': 2}, {'c.customer_id': 122, 'transaction_count': 3}, {'c.customer_id': 97, 'transaction_count': 1}, {'c.customer_id': 127, 'transaction_count': 3}, {'c.customer_id': 172, 'transaction_count': 7}, {'c.customer_id': 169, 'transaction_count': 1}, {'c.customer_id': 69, 'transaction_count': 1}, {'c.customer_id': 79, 'transaction_count': 2}, {'c.customer_id': 61, 'transaction_count': 1}, {'c.customer_id': 66, 'transaction_count': 4}, {'c.customer_id': 164, 'transaction_count': 1}, {'c.customer_id': 108, 'transaction_count': 2}, {'c.customer_id': 155, 'transaction_count': 2}, {'c.customer_id': 182, 'transaction_count': 1}, {'c.customer_id': 83, 'transaction_count': 2}, {'c.customer_id': 167, 'transaction_count': 2}, {'c.customer_id': 90, 'transaction_count': 4}, {'c.customer_id': 41, 'transaction_count': 3}, {'c.customer_id': 173, 'transaction_count': 2}, {'c.customer_id': 74, 'transaction_count': 2}, {'c.customer_id': 98, 'transaction_count': 1}, {'c.customer_id': 19, 'transaction_count': 2}, {'c.customer_id': 179, 'transaction_count': 2}, {'c.customer_id': 20, 'transaction_count': 1}, {'c.customer_id': 44, 'transaction_count': 4}, {'c.customer_id': 160, 'transaction_count': 1}, {'c.customer_id': 9, 'transaction_count': 2}, {'c.customer_id': 198, 'transaction_count': 1}, {'c.customer_id': 94, 'transaction_count': 2}, {'c.customer_id': 64, 'transaction_count': 2}, {'c.customer_id': 137, 'transaction_count': 2}, {'c.customer_id': 196, 'transaction_count': 3}, {'c.customer_id': 51, 'transaction_count': 1}, {'c.customer_id': 80, 'transaction_count': 1}, {'c.customer_id': 42, 'transaction_count': 1}, {'c.customer_id': 135, 'transaction_count': 2}, {'c.customer_id': 101, 'transaction_count': 2}, {'c.customer_id': 91, 'transaction_count': 1}, {'c.customer_id': 151, 'transaction_count': 1}, {'c.customer_id': 60, 'transaction_count': 1}, {'c.customer_id': 191, 'transaction_count': 1}, {'c.customer_id': 130, 'transaction_count': 1}]",
    "cypher_time_exec": 0.030763167000259273,
    "id": "2026243a-5cb3-4cf1-8ea3-2a76fae56272",
    "query": "Count the number of transactions per customer with maximum amount over 2000."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE toInteger(l.payment_term) > 18\nRETURN count(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.6024143750037183,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.04120537500421051,
    "id": "b63933ad-dc6d-4913-95ae-e93a84d8df53",
    "query": "Count the number of customers with average loan term above 18 months."
  },
  {
    "cypher_command": "MATCH (a:Accounts)\nOPTIONAL MATCH (a)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH a, \n     SUM(t.transaction_amount) AS total_deposits,\n     COLLECT(DISTINCT t) AS transactions\nOPTIONAL MATCH (a)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH a, total_deposits, \n     SUM(l.balance) AS total_loans\nWHERE total_deposits > total_loans\nRETURN COUNT(a) AS accounts_count",
    "cypher_time_llm_gen": 6.391388833995734,
    "cypher_answer": "[{'accounts_count': 163}]",
    "cypher_time_exec": 0.06131712500064168,
    "query": "Count the number of accounts with total deposits exceeding loans.",
    "id": "cd450325-b937-4487-abad-389d4a49ad18"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH c, COUNT(DISTINCT a) AS branchCount\nWHERE branchCount = 4\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 2.1478530839958694,
    "cypher_answer": "[{'customerCount': 7}]",
    "cypher_time_exec": 0.03887079200649168,
    "id": "14c0ea0a-8855-43e0-a928-981704cab879",
    "query": "Count the number of customers with transactions in all branches."
  },
  {
    "cypher_command": "MATCH (d:Deposits)<-[:BELONGS_TO_CUSTOMER]-(c:Customers)-[:HAS_LOAN_TYPE]->(l:Loans) WHERE d.balance > 1000 WITH l.loan_type_id AS loan_type_id, COUNT(d) AS deposit_count RETURN loan_type_id, deposit_count",
    "cypher_time_llm_gen": 3.1039134999955422,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.04939612500311341,
    "query": "Count the number of deposits with balance above 1000 per loan type.",
    "id": "ecbfaba7-046a-4120-a466-7479ad9ad063"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE t.transaction_amount < 1000\nRETURN c.customer_id, COUNT(t) AS transaction_count",
    "cypher_time_llm_gen": 1.757033500005491,
    "cypher_answer": "[{'c.customer_id': 61, 'transaction_count': 7}, {'c.customer_id': 22, 'transaction_count': 7}, {'c.customer_id': 176, 'transaction_count': 3}, {'c.customer_id': 167, 'transaction_count': 3}, {'c.customer_id': 198, 'transaction_count': 2}, {'c.customer_id': 9, 'transaction_count': 7}, {'c.customer_id': 148, 'transaction_count': 6}, {'c.customer_id': 187, 'transaction_count': 2}, {'c.customer_id': 25, 'transaction_count': 2}, {'c.customer_id': 112, 'transaction_count': 2}, {'c.customer_id': 83, 'transaction_count': 3}, {'c.customer_id': 60, 'transaction_count': 5}, {'c.customer_id': 36, 'transaction_count': 3}, {'c.customer_id': 24, 'transaction_count': 7}, {'c.customer_id': 30, 'transaction_count': 9}, {'c.customer_id': 72, 'transaction_count': 5}, {'c.customer_id': 114, 'transaction_count': 2}, {'c.customer_id': 5, 'transaction_count': 2}, {'c.customer_id': 34, 'transaction_count': 4}, {'c.customer_id': 28, 'transaction_count': 8}, {'c.customer_id': 137, 'transaction_count': 6}, {'c.customer_id': 124, 'transaction_count': 4}, {'c.customer_id': 166, 'transaction_count': 3}, {'c.customer_id': 91, 'transaction_count': 3}, {'c.customer_id': 155, 'transaction_count': 9}, {'c.customer_id': 108, 'transaction_count': 4}, {'c.customer_id': 97, 'transaction_count': 2}, {'c.customer_id': 39, 'transaction_count': 4}, {'c.customer_id': 186, 'transaction_count': 3}, {'c.customer_id': 7, 'transaction_count': 5}, {'c.customer_id': 183, 'transaction_count': 2}, {'c.customer_id': 159, 'transaction_count': 3}, {'c.customer_id': 170, 'transaction_count': 13}, {'c.customer_id': 17, 'transaction_count': 9}, {'c.customer_id': 62, 'transaction_count': 1}, {'c.customer_id': 33, 'transaction_count': 5}, {'c.customer_id': 106, 'transaction_count': 5}, {'c.customer_id': 21, 'transaction_count': 3}, {'c.customer_id': 110, 'transaction_count': 8}, {'c.customer_id': 174, 'transaction_count': 6}, {'c.customer_id': 117, 'transaction_count': 2}, {'c.customer_id': 57, 'transaction_count': 2}, {'c.customer_id': 76, 'transaction_count': 5}, {'c.customer_id': 107, 'transaction_count': 4}, {'c.customer_id': 82, 'transaction_count': 6}, {'c.customer_id': 147, 'transaction_count': 5}, {'c.customer_id': 89, 'transaction_count': 3}, {'c.customer_id': 138, 'transaction_count': 2}, {'c.customer_id': 19, 'transaction_count': 3}, {'c.customer_id': 101, 'transaction_count': 4}, {'c.customer_id': 50, 'transaction_count': 4}, {'c.customer_id': 47, 'transaction_count': 4}, {'c.customer_id': 98, 'transaction_count': 6}, {'c.customer_id': 65, 'transaction_count': 4}, {'c.customer_id': 192, 'transaction_count': 9}, {'c.customer_id': 88, 'transaction_count': 7}, {'c.customer_id': 16, 'transaction_count': 15}, {'c.customer_id': 119, 'transaction_count': 7}, {'c.customer_id': 20, 'transaction_count': 3}, {'c.customer_id': 68, 'transaction_count': 2}, {'c.customer_id': 63, 'transaction_count': 3}, {'c.customer_id': 31, 'transaction_count': 5}, {'c.customer_id': 32, 'transaction_count': 3}, {'c.customer_id': 135, 'transaction_count': 6}, {'c.customer_id': 169, 'transaction_count': 3}, {'c.customer_id': 73, 'transaction_count': 6}, {'c.customer_id': 153, 'transaction_count': 7}, {'c.customer_id': 42, 'transaction_count': 1}, {'c.customer_id': 81, 'transaction_count': 4}, {'c.customer_id': 118, 'transaction_count': 8}, {'c.customer_id': 37, 'transaction_count': 5}, {'c.customer_id': 109, 'transaction_count': 4}, {'c.customer_id': 179, 'transaction_count': 6}, {'c.customer_id': 6, 'transaction_count': 5}, {'c.customer_id': 182, 'transaction_count': 2}, {'c.customer_id': 90, 'transaction_count': 6}, {'c.customer_id': 133, 'transaction_count': 14}, {'c.customer_id': 164, 'transaction_count': 7}, {'c.customer_id': 160, 'transaction_count': 2}, {'c.customer_id': 46, 'transaction_count': 3}, {'c.customer_id': 94, 'transaction_count': 1}, {'c.customer_id': 150, 'transaction_count': 2}, {'c.customer_id': 129, 'transaction_count': 5}, {'c.customer_id': 66, 'transaction_count': 3}, {'c.customer_id': 123, 'transaction_count': 3}, {'c.customer_id': 171, 'transaction_count': 5}, {'c.customer_id': 185, 'transaction_count': 4}, {'c.customer_id': 188, 'transaction_count': 3}, {'c.customer_id': 158, 'transaction_count': 4}, {'c.customer_id': 172, 'transaction_count': 3}, {'c.customer_id': 122, 'transaction_count': 3}, {'c.customer_id': 165, 'transaction_count': 2}, {'c.customer_id': 161, 'transaction_count': 1}, {'c.customer_id': 154, 'transaction_count': 1}, {'c.customer_id': 58, 'transaction_count': 7}, {'c.customer_id': 104, 'transaction_count': 5}, {'c.customer_id': 67, 'transaction_count': 10}, {'c.customer_id': 59, 'transaction_count': 5}, {'c.customer_id': 56, 'transaction_count': 6}, {'c.customer_id': 27, 'transaction_count': 4}, {'c.customer_id': 200, 'transaction_count': 4}, {'c.customer_id': 102, 'transaction_count': 1}, {'c.customer_id': 105, 'transaction_count': 2}, {'c.customer_id': 77, 'transaction_count': 2}, {'c.customer_id': 132, 'transaction_count': 3}, {'c.customer_id': 8, 'transaction_count': 2}, {'c.customer_id': 116, 'transaction_count': 6}, {'c.customer_id': 26, 'transaction_count': 7}, {'c.customer_id': 41, 'transaction_count': 4}, {'c.customer_id': 55, 'transaction_count': 3}, {'c.customer_id': 191, 'transaction_count': 5}, {'c.customer_id': 196, 'transaction_count': 2}, {'c.customer_id': 151, 'transaction_count': 6}, {'c.customer_id': 11, 'transaction_count': 3}, {'c.customer_id': 69, 'transaction_count': 3}, {'c.customer_id': 64, 'transaction_count': 4}, {'c.customer_id': 93, 'transaction_count': 7}, {'c.customer_id': 168, 'transaction_count': 1}, {'c.customer_id': 111, 'transaction_count': 2}, {'c.customer_id': 163, 'transaction_count': 5}, {'c.customer_id': 139, 'transaction_count': 8}, {'c.customer_id': 144, 'transaction_count': 2}, {'c.customer_id': 71, 'transaction_count': 2}, {'c.customer_id': 44, 'transaction_count': 2}, {'c.customer_id': 103, 'transaction_count': 2}, {'c.customer_id': 173, 'transaction_count': 1}, {'c.customer_id': 87, 'transaction_count': 1}, {'c.customer_id': 43, 'transaction_count': 1}, {'c.customer_id': 80, 'transaction_count': 1}, {'c.customer_id': 141, 'transaction_count': 1}, {'c.customer_id': 14, 'transaction_count': 1}, {'c.customer_id': 152, 'transaction_count': 3}, {'c.customer_id': 29, 'transaction_count': 2}, {'c.customer_id': 126, 'transaction_count': 3}, {'c.customer_id': 13, 'transaction_count': 2}, {'c.customer_id': 51, 'transaction_count': 1}, {'c.customer_id': 10, 'transaction_count': 1}, {'c.customer_id': 23, 'transaction_count': 1}, {'c.customer_id': 2, 'transaction_count': 1}, {'c.customer_id': 189, 'transaction_count': 1}]",
    "cypher_time_exec": 0.05680995799775701,
    "id": "e0e62258-51fc-4564-8d73-3f595f42eef1",
    "query": "Count the number of transactions per customer with total amount below 1000."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nMATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(ca:Cards)\nWHERE date(l.end_date) < date('2026-01-01') AND date(ca.expiration_date) < date('2026-01-01')\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.5394958749966463,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.06371562500135042,
    "id": "5ad7e735-c3ec-41ee-ad8e-223a61fe7f4a",
    "query": "Count the number of customers with loans and cards expiring before 2026."
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH a, AVG(t.transaction_amount) AS avg_transaction_amount\nWHERE avg_transaction_amount > 200\nRETURN COUNT(a) AS account_count",
    "cypher_time_llm_gen": 1.7966444170015166,
    "cypher_answer": "[{'account_count': 147}]",
    "cypher_time_exec": 0.04399816699879011,
    "id": "c1db13ed-2745-4c18-9719-e15b1f6f41e4",
    "query": "Count the number of accounts with average transaction amount above 200."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE date(d.end_date) >= date('2025-01-01') AND date(l.start_date) < date('2026-01-01')\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.7039299590032897,
    "cypher_answer": "[{'customer_count': 90}]",
    "cypher_time_exec": 0.05741337499785004,
    "id": "c8a06a30-2ee8-49b3-8896-bbfa2e4122da",
    "query": "Count the number of customers with deposits ending in 2025 and loans starting in 2025."
  },
  {
    "cypher_command": "MATCH (a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH a, COUNT(t) AS transaction_count, STDEV(t.transaction_amount) AS stddev\nWHERE stddev > 500\nRETURN a.account_id, transaction_count",
    "cypher_time_llm_gen": 1.7860292500045034,
    "cypher_answer": "[{'a.account_id': 1, 'transaction_count': 3}, {'a.account_id': 2, 'transaction_count': 4}, {'a.account_id': 3, 'transaction_count': 4}, {'a.account_id': 4, 'transaction_count': 4}, {'a.account_id': 5, 'transaction_count': 2}, {'a.account_id': 6, 'transaction_count': 5}, {'a.account_id': 7, 'transaction_count': 5}, {'a.account_id': 8, 'transaction_count': 2}, {'a.account_id': 10, 'transaction_count': 3}, {'a.account_id': 12, 'transaction_count': 10}, {'a.account_id': 13, 'transaction_count': 4}, {'a.account_id': 15, 'transaction_count': 3}, {'a.account_id': 16, 'transaction_count': 5}, {'a.account_id': 17, 'transaction_count': 2}, {'a.account_id': 18, 'transaction_count': 5}, {'a.account_id': 19, 'transaction_count': 4}, {'a.account_id': 20, 'transaction_count': 2}, {'a.account_id': 21, 'transaction_count': 6}, {'a.account_id': 22, 'transaction_count': 5}, {'a.account_id': 23, 'transaction_count': 6}, {'a.account_id': 25, 'transaction_count': 5}, {'a.account_id': 27, 'transaction_count': 6}, {'a.account_id': 28, 'transaction_count': 2}, {'a.account_id': 29, 'transaction_count': 3}, {'a.account_id': 30, 'transaction_count': 4}, {'a.account_id': 32, 'transaction_count': 2}, {'a.account_id': 33, 'transaction_count': 4}, {'a.account_id': 35, 'transaction_count': 8}, {'a.account_id': 36, 'transaction_count': 4}, {'a.account_id': 38, 'transaction_count': 6}, {'a.account_id': 39, 'transaction_count': 2}, {'a.account_id': 40, 'transaction_count': 4}, {'a.account_id': 41, 'transaction_count': 2}, {'a.account_id': 42, 'transaction_count': 2}, {'a.account_id': 43, 'transaction_count': 3}, {'a.account_id': 44, 'transaction_count': 3}, {'a.account_id': 45, 'transaction_count': 2}, {'a.account_id': 46, 'transaction_count': 5}, {'a.account_id': 47, 'transaction_count': 2}, {'a.account_id': 49, 'transaction_count': 3}, {'a.account_id': 51, 'transaction_count': 2}, {'a.account_id': 53, 'transaction_count': 5}, {'a.account_id': 54, 'transaction_count': 6}, {'a.account_id': 55, 'transaction_count': 5}, {'a.account_id': 57, 'transaction_count': 3}, {'a.account_id': 60, 'transaction_count': 3}, {'a.account_id': 62, 'transaction_count': 4}, {'a.account_id': 64, 'transaction_count': 5}, {'a.account_id': 65, 'transaction_count': 5}, {'a.account_id': 66, 'transaction_count': 3}, {'a.account_id': 67, 'transaction_count': 7}, {'a.account_id': 70, 'transaction_count': 5}, {'a.account_id': 71, 'transaction_count': 4}, {'a.account_id': 72, 'transaction_count': 3}, {'a.account_id': 73, 'transaction_count': 4}, {'a.account_id': 74, 'transaction_count': 3}, {'a.account_id': 75, 'transaction_count': 5}, {'a.account_id': 78, 'transaction_count': 4}, {'a.account_id': 79, 'transaction_count': 5}, {'a.account_id': 80, 'transaction_count': 2}, {'a.account_id': 81, 'transaction_count': 2}, {'a.account_id': 82, 'transaction_count': 3}, {'a.account_id': 83, 'transaction_count': 8}, {'a.account_id': 88, 'transaction_count': 2}, {'a.account_id': 89, 'transaction_count': 2}, {'a.account_id': 90, 'transaction_count': 5}, {'a.account_id': 91, 'transaction_count': 2}, {'a.account_id': 92, 'transaction_count': 4}, {'a.account_id': 93, 'transaction_count': 4}, {'a.account_id': 94, 'transaction_count': 2}, {'a.account_id': 95, 'transaction_count': 4}, {'a.account_id': 96, 'transaction_count': 2}, {'a.account_id': 97, 'transaction_count': 3}, {'a.account_id': 98, 'transaction_count': 5}, {'a.account_id': 99, 'transaction_count': 5}, {'a.account_id': 101, 'transaction_count': 4}, {'a.account_id': 102, 'transaction_count': 3}, {'a.account_id': 103, 'transaction_count': 2}, {'a.account_id': 105, 'transaction_count': 3}, {'a.account_id': 106, 'transaction_count': 2}, {'a.account_id': 107, 'transaction_count': 2}, {'a.account_id': 109, 'transaction_count': 5}, {'a.account_id': 110, 'transaction_count': 3}, {'a.account_id': 113, 'transaction_count': 3}, {'a.account_id': 114, 'transaction_count': 3}, {'a.account_id': 115, 'transaction_count': 5}, {'a.account_id': 116, 'transaction_count': 4}, {'a.account_id': 117, 'transaction_count': 3}, {'a.account_id': 119, 'transaction_count': 6}, {'a.account_id': 120, 'transaction_count': 3}, {'a.account_id': 121, 'transaction_count': 2}, {'a.account_id': 122, 'transaction_count': 2}, {'a.account_id': 123, 'transaction_count': 3}, {'a.account_id': 124, 'transaction_count': 2}, {'a.account_id': 126, 'transaction_count': 2}, {'a.account_id': 127, 'transaction_count': 2}, {'a.account_id': 128, 'transaction_count': 4}, {'a.account_id': 129, 'transaction_count': 3}, {'a.account_id': 130, 'transaction_count': 4}, {'a.account_id': 132, 'transaction_count': 3}, {'a.account_id': 133, 'transaction_count': 2}, {'a.account_id': 134, 'transaction_count': 4}, {'a.account_id': 135, 'transaction_count': 2}, {'a.account_id': 136, 'transaction_count': 2}, {'a.account_id': 137, 'transaction_count': 3}, {'a.account_id': 138, 'transaction_count': 5}, {'a.account_id': 139, 'transaction_count': 3}, {'a.account_id': 140, 'transaction_count': 3}, {'a.account_id': 141, 'transaction_count': 6}, {'a.account_id': 143, 'transaction_count': 5}, {'a.account_id': 144, 'transaction_count': 5}, {'a.account_id': 145, 'transaction_count': 4}, {'a.account_id': 146, 'transaction_count': 4}, {'a.account_id': 147, 'transaction_count': 3}, {'a.account_id': 148, 'transaction_count': 2}, {'a.account_id': 149, 'transaction_count': 6}, {'a.account_id': 150, 'transaction_count': 6}, {'a.account_id': 152, 'transaction_count': 6}, {'a.account_id': 154, 'transaction_count': 4}, {'a.account_id': 155, 'transaction_count': 3}, {'a.account_id': 156, 'transaction_count': 6}, {'a.account_id': 157, 'transaction_count': 3}, {'a.account_id': 158, 'transaction_count': 7}, {'a.account_id': 159, 'transaction_count': 5}, {'a.account_id': 160, 'transaction_count': 2}, {'a.account_id': 161, 'transaction_count': 3}, {'a.account_id': 162, 'transaction_count': 4}, {'a.account_id': 163, 'transaction_count': 4}, {'a.account_id': 164, 'transaction_count': 2}, {'a.account_id': 165, 'transaction_count': 3}, {'a.account_id': 166, 'transaction_count': 2}, {'a.account_id': 167, 'transaction_count': 4}, {'a.account_id': 168, 'transaction_count': 3}, {'a.account_id': 170, 'transaction_count': 4}, {'a.account_id': 171, 'transaction_count': 7}, {'a.account_id': 172, 'transaction_count': 2}, {'a.account_id': 174, 'transaction_count': 4}, {'a.account_id': 175, 'transaction_count': 6}, {'a.account_id': 176, 'transaction_count': 5}, {'a.account_id': 177, 'transaction_count': 3}, {'a.account_id': 178, 'transaction_count': 5}, {'a.account_id': 179, 'transaction_count': 4}, {'a.account_id': 180, 'transaction_count': 2}, {'a.account_id': 181, 'transaction_count': 3}, {'a.account_id': 182, 'transaction_count': 5}, {'a.account_id': 183, 'transaction_count': 4}, {'a.account_id': 184, 'transaction_count': 3}, {'a.account_id': 185, 'transaction_count': 3}, {'a.account_id': 188, 'transaction_count': 4}, {'a.account_id': 189, 'transaction_count': 4}, {'a.account_id': 191, 'transaction_count': 3}, {'a.account_id': 192, 'transaction_count': 6}, {'a.account_id': 195, 'transaction_count': 2}, {'a.account_id': 196, 'transaction_count': 7}, {'a.account_id': 197, 'transaction_count': 3}, {'a.account_id': 199, 'transaction_count': 4}, {'a.account_id': 200, 'transaction_count': 6}, {'a.account_id': 202, 'transaction_count': 2}, {'a.account_id': 203, 'transaction_count': 3}, {'a.account_id': 205, 'transaction_count': 3}, {'a.account_id': 206, 'transaction_count': 5}, {'a.account_id': 208, 'transaction_count': 2}, {'a.account_id': 210, 'transaction_count': 4}, {'a.account_id': 211, 'transaction_count': 3}, {'a.account_id': 212, 'transaction_count': 3}, {'a.account_id': 214, 'transaction_count': 3}, {'a.account_id': 215, 'transaction_count': 4}, {'a.account_id': 217, 'transaction_count': 4}, {'a.account_id': 218, 'transaction_count': 5}, {'a.account_id': 219, 'transaction_count': 2}, {'a.account_id': 220, 'transaction_count': 4}, {'a.account_id': 221, 'transaction_count': 2}, {'a.account_id': 222, 'transaction_count': 3}, {'a.account_id': 223, 'transaction_count': 3}, {'a.account_id': 224, 'transaction_count': 6}, {'a.account_id': 225, 'transaction_count': 4}, {'a.account_id': 227, 'transaction_count': 4}, {'a.account_id': 228, 'transaction_count': 4}, {'a.account_id': 229, 'transaction_count': 4}, {'a.account_id': 230, 'transaction_count': 3}, {'a.account_id': 231, 'transaction_count': 5}, {'a.account_id': 232, 'transaction_count': 2}, {'a.account_id': 234, 'transaction_count': 4}, {'a.account_id': 235, 'transaction_count': 6}, {'a.account_id': 236, 'transaction_count': 5}, {'a.account_id': 237, 'transaction_count': 11}, {'a.account_id': 238, 'transaction_count': 6}, {'a.account_id': 239, 'transaction_count': 6}, {'a.account_id': 240, 'transaction_count': 4}, {'a.account_id': 241, 'transaction_count': 5}, {'a.account_id': 242, 'transaction_count': 4}, {'a.account_id': 243, 'transaction_count': 4}, {'a.account_id': 244, 'transaction_count': 4}, {'a.account_id': 245, 'transaction_count': 4}, {'a.account_id': 246, 'transaction_count': 3}, {'a.account_id': 247, 'transaction_count': 4}, {'a.account_id': 248, 'transaction_count': 4}, {'a.account_id': 249, 'transaction_count': 4}, {'a.account_id': 250, 'transaction_count': 2}, {'a.account_id': 251, 'transaction_count': 3}, {'a.account_id': 252, 'transaction_count': 4}, {'a.account_id': 253, 'transaction_count': 7}, {'a.account_id': 256, 'transaction_count': 4}, {'a.account_id': 257, 'transaction_count': 2}, {'a.account_id': 258, 'transaction_count': 6}, {'a.account_id': 260, 'transaction_count': 4}, {'a.account_id': 261, 'transaction_count': 4}, {'a.account_id': 262, 'transaction_count': 4}, {'a.account_id': 264, 'transaction_count': 4}, {'a.account_id': 266, 'transaction_count': 4}, {'a.account_id': 268, 'transaction_count': 3}, {'a.account_id': 269, 'transaction_count': 2}, {'a.account_id': 270, 'transaction_count': 6}, {'a.account_id': 271, 'transaction_count': 7}, {'a.account_id': 273, 'transaction_count': 5}, {'a.account_id': 274, 'transaction_count': 3}, {'a.account_id': 275, 'transaction_count': 5}, {'a.account_id': 276, 'transaction_count': 2}, {'a.account_id': 277, 'transaction_count': 2}, {'a.account_id': 278, 'transaction_count': 7}, {'a.account_id': 279, 'transaction_count': 5}, {'a.account_id': 280, 'transaction_count': 6}, {'a.account_id': 281, 'transaction_count': 5}, {'a.account_id': 282, 'transaction_count': 7}, {'a.account_id': 283, 'transaction_count': 5}, {'a.account_id': 284, 'transaction_count': 4}, {'a.account_id': 285, 'transaction_count': 3}, {'a.account_id': 286, 'transaction_count': 4}, {'a.account_id': 287, 'transaction_count': 3}, {'a.account_id': 288, 'transaction_count': 3}, {'a.account_id': 289, 'transaction_count': 3}, {'a.account_id': 290, 'transaction_count': 2}, {'a.account_id': 291, 'transaction_count': 2}, {'a.account_id': 292, 'transaction_count': 5}, {'a.account_id': 293, 'transaction_count': 5}, {'a.account_id': 294, 'transaction_count': 7}, {'a.account_id': 295, 'transaction_count': 4}, {'a.account_id': 296, 'transaction_count': 4}, {'a.account_id': 297, 'transaction_count': 2}, {'a.account_id': 298, 'transaction_count': 3}, {'a.account_id': 299, 'transaction_count': 3}]",
    "cypher_time_exec": 0.06725345899758395,
    "id": "a218fc1d-b651-4ce2-b383-68246bcbabcf",
    "query": "Count the number of transactions per account with standard deviation above 500."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWITH c, SUM(a.account_balance) AS total_balance\nWHERE total_balance > 10000\nRETURN COUNT(c) AS customer_count",
    "cypher_time_llm_gen": 1.8773011669982225,
    "cypher_answer": "[{'customer_count': 142}]",
    "cypher_time_exec": 0.041601500000979286,
    "id": "07efca92-932b-4757-adf4-ba8b0ff60c11",
    "query": "Count the number of customers with total balance across all accounts above 10000."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE toInteger(d.term) > 12\nRETURN c.customer_id, count(d) AS deposit_count",
    "cypher_time_llm_gen": 2.2107108339987462,
    "cypher_answer": "[]",
    "cypher_time_exec": 0.040066875000775326,
    "id": "d2f043c8-7d3a-4bc7-9200-7a3587abd1da",
    "query": "Count the number of deposits per customer with average term above 12 months."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE l.interest_rate > 4\nRETURN c.customer_id, COUNT(l) AS loan_count",
    "cypher_time_llm_gen": 2.319155999997747,
    "cypher_answer": "[{'c.customer_id': 18, 'loan_count': 1}, {'c.customer_id': 81, 'loan_count': 3}, {'c.customer_id': 183, 'loan_count': 1}, {'c.customer_id': 174, 'loan_count': 1}, {'c.customer_id': 94, 'loan_count': 1}, {'c.customer_id': 21, 'loan_count': 1}, {'c.customer_id': 198, 'loan_count': 2}, {'c.customer_id': 28, 'loan_count': 1}, {'c.customer_id': 150, 'loan_count': 1}, {'c.customer_id': 15, 'loan_count': 2}, {'c.customer_id': 59, 'loan_count': 2}, {'c.customer_id': 52, 'loan_count': 3}, {'c.customer_id': 43, 'loan_count': 1}, {'c.customer_id': 200, 'loan_count': 2}, {'c.customer_id': 71, 'loan_count': 2}, {'c.customer_id': 42, 'loan_count': 1}, {'c.customer_id': 188, 'loan_count': 2}, {'c.customer_id': 128, 'loan_count': 1}, {'c.customer_id': 116, 'loan_count': 1}, {'c.customer_id': 120, 'loan_count': 2}, {'c.customer_id': 103, 'loan_count': 1}, {'c.customer_id': 165, 'loan_count': 1}, {'c.customer_id': 14, 'loan_count': 1}, {'c.customer_id': 140, 'loan_count': 3}, {'c.customer_id': 173, 'loan_count': 3}, {'c.customer_id': 108, 'loan_count': 1}, {'c.customer_id': 96, 'loan_count': 3}, {'c.customer_id': 177, 'loan_count': 1}, {'c.customer_id': 61, 'loan_count': 1}, {'c.customer_id': 11, 'loan_count': 2}, {'c.customer_id': 168, 'loan_count': 3}, {'c.customer_id': 101, 'loan_count': 1}, {'c.customer_id': 88, 'loan_count': 1}, {'c.customer_id': 69, 'loan_count': 1}, {'c.customer_id': 100, 'loan_count': 1}, {'c.customer_id': 184, 'loan_count': 1}, {'c.customer_id': 156, 'loan_count': 1}, {'c.customer_id': 19, 'loan_count': 1}, {'c.customer_id': 72, 'loan_count': 1}, {'c.customer_id': 121, 'loan_count': 2}, {'c.customer_id': 180, 'loan_count': 2}, {'c.customer_id': 158, 'loan_count': 2}, {'c.customer_id': 23, 'loan_count': 1}, {'c.customer_id': 127, 'loan_count': 1}, {'c.customer_id': 143, 'loan_count': 2}, {'c.customer_id': 51, 'loan_count': 1}, {'c.customer_id': 44, 'loan_count': 1}, {'c.customer_id': 107, 'loan_count': 1}, {'c.customer_id': 86, 'loan_count': 2}, {'c.customer_id': 196, 'loan_count': 1}, {'c.customer_id': 133, 'loan_count': 1}, {'c.customer_id': 112, 'loan_count': 1}, {'c.customer_id': 137, 'loan_count': 1}, {'c.customer_id': 170, 'loan_count': 1}, {'c.customer_id': 155, 'loan_count': 2}, {'c.customer_id': 138, 'loan_count': 1}, {'c.customer_id': 167, 'loan_count': 2}, {'c.customer_id': 164, 'loan_count': 1}, {'c.customer_id': 117, 'loan_count': 2}, {'c.customer_id': 8, 'loan_count': 1}, {'c.customer_id': 78, 'loan_count': 1}, {'c.customer_id': 162, 'loan_count': 2}, {'c.customer_id': 77, 'loan_count': 2}, {'c.customer_id': 80, 'loan_count': 2}, {'c.customer_id': 48, 'loan_count': 1}, {'c.customer_id': 76, 'loan_count': 1}, {'c.customer_id': 135, 'loan_count': 1}, {'c.customer_id': 6, 'loan_count': 2}, {'c.customer_id': 130, 'loan_count': 1}, {'c.customer_id': 4, 'loan_count': 1}, {'c.customer_id': 9, 'loan_count': 1}, {'c.customer_id': 17, 'loan_count': 1}, {'c.customer_id': 49, 'loan_count': 1}, {'c.customer_id': 38, 'loan_count': 1}, {'c.customer_id': 66, 'loan_count': 2}, {'c.customer_id': 169, 'loan_count': 1}, {'c.customer_id': 33, 'loan_count': 1}, {'c.customer_id': 90, 'loan_count': 1}, {'c.customer_id': 60, 'loan_count': 1}, {'c.customer_id': 123, 'loan_count': 1}, {'c.customer_id': 95, 'loan_count': 1}, {'c.customer_id': 185, 'loan_count': 1}, {'c.customer_id': 82, 'loan_count': 1}, {'c.customer_id': 149, 'loan_count': 1}, {'c.customer_id': 186, 'loan_count': 1}]",
    "cypher_time_exec": 0.04521329200360924,
    "id": "a65ccdac-bc46-402b-bf1f-2d8a8c1743a3",
    "query": "Count the number of loans per customer with average interest rate above 4%."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, COUNT(d) AS depositCount, COUNT(l) AS loanCount\nWHERE depositCount > loanCount\nRETURN COUNT(DISTINCT c) AS customerCount",
    "cypher_time_llm_gen": 3.8411131249959,
    "cypher_answer": "[{'customerCount': 0}]",
    "cypher_time_exec": 0.04918020899640396,
    "id": "f7d85cef-77dd-4ad4-8bcd-b5fbc907644b",
    "query": "Count the number of accounts with more deposits than loans per customer."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH c, AVG(d.balance) AS avg_balance\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(d2:Deposits)\nWHERE d2.balance > avg_balance\nRETURN c.customer_id, COUNT(d2) AS deposit_count",
    "cypher_time_llm_gen": 2.988535167001828,
    "cypher_answer": "[{'c.customer_id': 153, 'deposit_count': 1}, {'c.customer_id': 179, 'deposit_count': 1}, {'c.customer_id': 36, 'deposit_count': 1}, {'c.customer_id': 172, 'deposit_count': 1}, {'c.customer_id': 99, 'deposit_count': 1}, {'c.customer_id': 195, 'deposit_count': 1}, {'c.customer_id': 131, 'deposit_count': 1}, {'c.customer_id': 3, 'deposit_count': 2}, {'c.customer_id': 28, 'deposit_count': 2}, {'c.customer_id': 115, 'deposit_count': 1}, {'c.customer_id': 80, 'deposit_count': 1}, {'c.customer_id': 188, 'deposit_count': 1}, {'c.customer_id': 148, 'deposit_count': 1}, {'c.customer_id': 197, 'deposit_count': 1}, {'c.customer_id': 184, 'deposit_count': 1}, {'c.customer_id': 64, 'deposit_count': 1}, {'c.customer_id': 194, 'deposit_count': 1}, {'c.customer_id': 26, 'deposit_count': 1}, {'c.customer_id': 23, 'deposit_count': 1}, {'c.customer_id': 132, 'deposit_count': 1}, {'c.customer_id': 50, 'deposit_count': 1}, {'c.customer_id': 7, 'deposit_count': 1}, {'c.customer_id': 70, 'deposit_count': 1}, {'c.customer_id': 124, 'deposit_count': 1}, {'c.customer_id': 142, 'deposit_count': 1}, {'c.customer_id': 73, 'deposit_count': 1}, {'c.customer_id': 69, 'deposit_count': 3}, {'c.customer_id': 127, 'deposit_count': 1}, {'c.customer_id': 182, 'deposit_count': 1}, {'c.customer_id': 117, 'deposit_count': 1}, {'c.customer_id': 125, 'deposit_count': 1}, {'c.customer_id': 181, 'deposit_count': 2}, {'c.customer_id': 90, 'deposit_count': 1}, {'c.customer_id': 68, 'deposit_count': 1}, {'c.customer_id': 157, 'deposit_count': 1}, {'c.customer_id': 37, 'deposit_count': 1}, {'c.customer_id': 61, 'deposit_count': 1}, {'c.customer_id': 114, 'deposit_count': 1}, {'c.customer_id': 71, 'deposit_count': 1}, {'c.customer_id': 66, 'deposit_count': 1}, {'c.customer_id': 38, 'deposit_count': 1}, {'c.customer_id': 143, 'deposit_count': 1}, {'c.customer_id': 20, 'deposit_count': 2}, {'c.customer_id': 193, 'deposit_count': 1}, {'c.customer_id': 4, 'deposit_count': 1}, {'c.customer_id': 78, 'deposit_count': 1}, {'c.customer_id': 51, 'deposit_count': 1}, {'c.customer_id': 180, 'deposit_count': 1}, {'c.customer_id': 103, 'deposit_count': 1}, {'c.customer_id': 52, 'deposit_count': 1}, {'c.customer_id': 150, 'deposit_count': 1}, {'c.customer_id': 42, 'deposit_count': 1}]",
    "cypher_time_exec": 0.05282275000354275,
    "id": "d8cc651d-20c2-41c2-b7bd-cdab1f878d10",
    "query": "Count the number of deposits with balance above average per customer."
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWITH c, COUNT(a) AS accountCount\nWHERE accountCount > 2\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 1.9330480830030865,
    "cypher_answer": "[{'customerCount': 40}]",
    "cypher_time_exec": 0.020064459000423085,
    "id": "e4b92796-ae4c-483b-b472-4f0584e5aad3",
    "query": "How many customers have more than 2 accounts?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH c, COUNT(l) AS loanCount\nWHERE loanCount > 1\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 1.7210672080036602,
    "cypher_answer": "[{'customerCount': 50}]",
    "cypher_time_exec": 0.023324166002566926,
    "id": "09239628-8021-46a1-9b88-84a51cf50b0c",
    "query": "How many customers have more than 1 loan?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH c, COUNT(d) AS depositCount\nWHERE depositCount > 1\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 4.993025584000861,
    "cypher_answer": "[{'customerCount': 52}]",
    "cypher_time_exec": 0.022462583001470193,
    "id": "d15e7376-6fd4-4109-9a01-b45e85f26375",
    "query": "How many customers have more than 1 deposit?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWITH c, COUNT(card) AS cardCount\nWHERE cardCount > 3\nRETURN COUNT(c) AS customerCount",
    "cypher_time_llm_gen": 1.9239384579996113,
    "cypher_answer": "[{'customerCount': 3}]",
    "cypher_time_exec": 0.01948045799508691,
    "id": "8b270f67-1b9a-48bf-8969-eefdb25bf75c",
    "query": "How many customers have more than 3 cards?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.1288011249998817,
    "cypher_answer": "[{'customer_count': 70}]",
    "cypher_time_exec": 0.04610391599999275,
    "id": "36d91656-b59f-47b6-8585-f47aecca592d",
    "query": "How many customers have both loans and cards?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.90132154100138,
    "cypher_answer": "[{'customer_count': 66}]",
    "cypher_time_exec": 0.019631167000625283,
    "id": "97333359-a9ba-4452-b0d1-6ab05c8566c3",
    "query": "How many customers have both deposits and cards?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.1216997080045985,
    "cypher_answer": "[{'customer_count': 101}]",
    "cypher_time_exec": 0.0214187080055126,
    "id": "5e5b2051-2e54-4175-bc74-43ca448686c2",
    "query": "How many customers have both loans and accounts?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.8296966669950052,
    "cypher_answer": "[{'customer_count': 99}]",
    "cypher_time_exec": 0.04097770799853606,
    "id": "005fdc8d-1efe-49a8-bc37-ddf4a293093c",
    "query": "How many customers have both deposits and accounts?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(cards:Cards), (c)<-[:BELONGS_TO_CUSTOMER]-(loans:Loans)\nWHERE cards.is_blocked = true\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.6399620840020361,
    "cypher_answer": "[{'customer_count': 42}]",
    "cypher_time_exec": 0.04746054099814501,
    "id": "61768143-6755-4ac5-a861-e6abec29c88f",
    "query": "How many customers have at least one blocked card and at least one active loan?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE date(t.transaction_date) >= date({ year: date().year, month: date().month, day: 1 })\nWITH c, COUNT(t) AS transactionCount\nWHERE transactionCount > 5\nRETURN COUNT(DISTINCT c) AS numberOfCustomers",
    "cypher_time_llm_gen": 3.391374459002691,
    "cypher_answer": "[{'numberOfCustomers': 0}]",
    "cypher_time_exec": 0.05800433299737051,
    "id": "1dc48130-aab7-42dd-8358-297eb18eec4d",
    "query": "What is the number of customers who made more than 5 transactions in the last month?"
  },
  {
    "cypher_command": "MATCH (a:Accounts)\nWITH avg(a.account_balance) AS avg_balance\nMATCH (b:Accounts)\nWHERE b.account_balance > avg_balance\nRETURN count(b) AS accounts_above_average_balance",
    "cypher_time_llm_gen": 1.4999479580001207,
    "cypher_answer": "[{'accounts_above_average_balance': 142}]",
    "cypher_time_exec": 0.042122958999243565,
    "id": "520c629c-801e-4230-bbc1-115149d4a275",
    "query": "How many accounts have balances above the average account balance?"
  },
  {
    "cypher_command": "MATCH (l:Loans)\nWITH AVG(l.balance) AS avg_balance\nMATCH (l:Loans)\nWHERE l.balance > avg_balance\nRETURN COUNT(l) AS loans_above_average",
    "cypher_time_llm_gen": 6.03092666700104,
    "cypher_answer": "[{'loans_above_average': 98}]",
    "cypher_time_exec": 0.045846916997106746,
    "id": "e9558e21-6cfb-4c10-b83d-72b665167108",
    "query": "How many loans have balances above the average loan balance?"
  },
  {
    "cypher_command": "MATCH (d:Deposits)\nWITH AVG(d.balance) AS avg_balance\nMATCH (d:Deposits)\nWHERE d.balance > avg_balance\nRETURN COUNT(d) AS count_above_average",
    "cypher_time_llm_gen": 1.6977901669961284,
    "cypher_answer": "[{'count_above_average': 108}]",
    "cypher_time_exec": 0.04228387500188546,
    "id": "4b7273d3-1a2e-4d32-80f3-04fe140c2545",
    "query": "How many deposits have balances above the average deposit balance?"
  },
  {
    "cypher_command": "MATCH (c:Cards)\nWITH AVG(c.balance) AS avg_balance\nMATCH (c:Cards)\nWHERE c.balance > avg_balance\nRETURN COUNT(c) AS count_above_average_balance",
    "cypher_time_llm_gen": 1.5397105419979198,
    "cypher_answer": "[{'count_above_average_balance': 81}]",
    "cypher_time_exec": 0.04670208299648948,
    "id": "7f5ec88a-2c3d-47a6-be5e-d8d5968b528a",
    "query": "How many cards have balances above the average card balance?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE date(l.end_date) < date() AND date(d.end_date) < date()\nRETURN COUNT(DISTINCT c) AS numberOfCustomers",
    "cypher_time_llm_gen": 2.0991754589995253,
    "cypher_answer": "[{'numberOfCustomers': 0}]",
    "cypher_time_exec": 0.06307458299852442,
    "id": "3e2368d1-47d1-4c90-a021-8dd6db5233c2",
    "query": "What is the number of customers who have both expired loans and expired deposits?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans) \nWHERE NOT (c)-[:BELONGS_TO_CUSTOMER]->(:Cards) \nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 3.282586417000857,
    "cypher_answer": "[{'customer_count': 90}]",
    "cypher_time_exec": 0.05465729199931957,
    "query": "How many customers have both deposits and loans but no cards?",
    "id": "49d48ff3-bf22-4af8-90ae-df7dc7b6dfe4"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.523627665999811,
    "cypher_answer": "[{'customer_count': 49}]",
    "cypher_time_exec": 0.05513433300075121,
    "id": "74e328a6-f3a2-425a-9695-8884826b2a9d",
    "query": "How many customers have deposits, loans, and cards all together?"
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)\nWITH b, COUNT(c) AS customerCount\nWHERE customerCount > 20\nRETURN COUNT(b) AS branchCount",
    "cypher_time_llm_gen": 1.8697477919995436,
    "cypher_answer": "[{'branchCount': 4}]",
    "cypher_time_exec": 0.02232704199559521,
    "id": "2be515f2-4952-4bd0-8dd7-33e5369be8fc",
    "query": "How many branches have more than 20 customers?"
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH b, SUM(l.balance) AS totalLoanBalance\nWHERE totalLoanBalance > 1000000\nRETURN COUNT(b) AS branchesAboveOneMillion",
    "cypher_time_llm_gen": 2.4391477500030305,
    "cypher_answer": "[{'branchesAboveOneMillion': 0}]",
    "cypher_time_exec": 0.06450787500216393,
    "id": "cc93e4d3-c7d0-4e26-ae36-0c42fd677594",
    "query": "How many branches have total loan balances above 1 million?"
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWITH b, AVG(a.account_balance) AS avg_balance\nWHERE avg_balance > 50000\nRETURN COUNT(b) AS branches_above_50000",
    "cypher_time_llm_gen": 2.2503061669995077,
    "cypher_answer": "[{'branches_above_50000': 0}]",
    "cypher_time_exec": 0.044123499996203464,
    "id": "7ebb2332-6c00-49e4-8c5c-8f62cb454fce",
    "query": "How many branches have average account balances above 50,000?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE t.transaction_amount > 10000\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 3.3400631249969592,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.023888792005891446,
    "id": "803b8f10-59d6-442c-8e18-22ec952802b7",
    "query": "How many customers made at least one transaction greater than 10,000?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE card.is_blocked = true\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nRETURN count(a) AS account_count",
    "cypher_time_llm_gen": 2.2625542500027223,
    "cypher_answer": "[{'account_count': 106}]",
    "cypher_time_exec": 0.0438862499941024,
    "id": "4fe27df6-1189-467a-afff-58819e107d52",
    "query": "How many accounts belong to customers who have blocked cards?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE card.is_blocked = false\nRETURN count(a) AS account_count",
    "cypher_time_llm_gen": 2.2085204160030116,
    "cypher_answer": "[{'account_count': 0}]",
    "cypher_time_exec": 0.04417875000217464,
    "id": "aa7c57cb-2b59-4ce1-9d78-696e9a3e3798",
    "query": "How many accounts belong to customers who have unblocked cards?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWITH AVG(l.interest_rate) AS avg_interest_rate\nMATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nWHERE l.interest_rate > avg_interest_rate\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 3.5902318749940605,
    "cypher_answer": "[{'customer_count': 75}]",
    "cypher_time_exec": 0.055405750004865695,
    "id": "7784a09d-281d-47bb-b5ac-ef30976a779e",
    "query": "How many customers have loans with interest rates above the average loan interest rate?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWITH AVG(d.interest_rate) AS avg_interest_rate\nMATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE d.interest_rate > avg_interest_rate\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.6637424589935108,
    "cypher_answer": "[{'customer_count': 83}]",
    "cypher_time_exec": 0.04967195900098886,
    "id": "5ce236d3-92fd-4060-a856-f5cfef318bf1",
    "query": "How many customers have deposits with interest rates above the average deposit interest rate?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nMATCH (a)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH c, AVG(t.transaction_amount) AS avgTransactionAmount\nMATCH (a)<-[:HAS_TRANSACTION]-(t2:Transactions)\nWHERE t2.transaction_amount > avgTransactionAmount\nRETURN COUNT(DISTINCT c) AS customerCount",
    "cypher_time_llm_gen": 4.593856708997919,
    "cypher_answer": "[{'customerCount': 152}]",
    "cypher_time_exec": 0.120905165997101,
    "query": "How many customers have both accounts and transactions exceeding the average transaction amount?",
    "id": "e28b8c37-85be-4b7c-b924-74c92a31b6f6"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE l.balance > 50000 AND d.balance > 50000\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.116847625002265,
    "cypher_answer": "[{'customer_count': 0}]",
    "cypher_time_exec": 0.05915041700063739,
    "id": "7eebeb7c-163f-4d4f-8802-d4ea38df4281",
    "query": "How many customers hold both loans of more than 50,000 and deposits of more than 50,000?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE card.is_blocked = true\nRETURN COUNT(DISTINCT c.branch_id) AS branches_with_blocked_cards",
    "cypher_time_llm_gen": 1.6553229160053888,
    "cypher_answer": "[{'branches_with_blocked_cards': 4}]",
    "cypher_time_exec": 0.0458686249985476,
    "id": "b258bf24-5229-4a1b-ad86-f16ba1a83814",
    "query": "How many branches have customers with blocked cards?"
  },
  {
    "cypher_command": "MATCH (b:Branches)<-[:BELONGS_TO_BRANCH]-(c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)\nWHERE a.account_balance > 100000\nRETURN count(DISTINCT a) AS transaction_count",
    "cypher_time_llm_gen": 2.228546541999094,
    "cypher_answer": "[{'transaction_count': 0}]",
    "cypher_time_exec": 0.05333920900011435,
    "id": "3cc1ce2e-2f9b-4ec4-ae2e-a1f387bf33d1",
    "query": "How many transactions occurred in branches where the average account balance is above 100,000?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE l.interest_rate > d.interest_rate\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 2.2638766250020126,
    "cypher_answer": "[{'customer_count': 56}]",
    "cypher_time_exec": 0.04220933300530305,
    "id": "60355c3e-316a-434e-92c3-97e76a4f2d86",
    "query": "How many customers took loans with interest rates higher than their deposit interest rates?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits), (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans\n)\nWHERE date(d.end_date) < date() AND date(l.end_date) >= date()\nRETURN COUNT(DISTINCT c) AS expired_deposits_with_active_loans",
    "cypher_time_llm_gen": 2.7687781669956166,
    "cypher_answer": "[{'expired_deposits_with_active_loans': 0}]",
    "cypher_time_exec": 0.057932833005907014,
    "id": "efb8c729-ced2-4d59-96ff-20e7e881cecb",
    "query": "How many customers have expired deposits but active loans?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(l:Loans), (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nWHERE date(l.end_date) < date() AND date(d.end_date) >= date()\nRETURN COUNT(DISTINCT c) AS expired_loans_active_deposits",
    "cypher_time_llm_gen": 2.2602727499979665,
    "cypher_answer": "[{'expired_loans_active_deposits': 7}]",
    "cypher_time_exec": 0.05432029099756619,
    "id": "99b8054f-6ed6-43c5-9785-fdb7ca20c4c0",
    "query": "How many customers have expired loans but active deposits?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWHERE date(t.transaction_date) >= date({ year: date().year - 1, month: 1, day: 1 }) AND date(t.transaction_date) < date({ year: date().year, month: 1, day: 1 })\nRETURN count(a) AS account_count",
    "cypher_time_llm_gen": 3.129298250001739,
    "cypher_answer": "[{'account_count': 222}]",
    "cypher_time_exec": 0.05159566599468235,
    "id": "a3ef7f7d-fb69-4196-a345-c4e5a9d7ce2b",
    "query": "How many accounts belong to customers who made transactions last year?"
  },
  {
    "cypher_command": "MATCH (c:Customers) \nOPTIONAL MATCH (c)<-[:BELONGS_TO_CUSTOMER]-(t:Transactions) \nWITH c, collect(t) AS transactions \nWHERE size(transactions) = 0 OR ALL(transaction IN transactions WHERE date(transaction.transaction_date) < date().epochMillis - 15552000000) \nRETURN count(c) AS customers_with_no_transactions",
    "cypher_time_llm_gen": 3.719149541000661,
    "cypher_answer": "[{'customers_with_no_transactions': 200}]",
    "cypher_time_exec": 0.06286724999517901,
    "query": "How many customers made no transactions in the last 6 months?",
    "id": "39192efa-ddc0-43a9-9885-7dffa8ef7580"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(card:Cards)\nWHERE card.is_blocked = true\nWITH c\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(card2:Cards)\nWHERE card2.is_blocked = false\nRETURN COUNT(DISTINCT c) AS customer_count",
    "cypher_time_llm_gen": 1.985477082998841,
    "cypher_answer": "[{'customer_count': 22}]",
    "cypher_time_exec": 0.06268295899644727,
    "id": "875894fd-32a1-4e0e-aeec-221efce23c2d",
    "query": "How many customers have both blocked and unblocked cards?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH c, COUNT(t) AS transaction_count\nWHERE transaction_count >= 10\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(l:Loans)\nRETURN COUNT(l) AS loan_count",
    "cypher_time_llm_gen": 2.1766643339942675,
    "cypher_answer": "[{'loan_count': 32}]",
    "cypher_time_exec": 0.06108795799809741,
    "id": "7fa8188e-d50c-4696-a730-f4105a12b144",
    "query": "How many loans belong to customers who also made at least 10 transactions?"
  },
  {
    "cypher_command": "MATCH (c:Customers)<-[:BELONGS_TO_CUSTOMER]-(a:Accounts)<-[:HAS_TRANSACTION]-(t:Transactions)\nWITH c, COUNT(t) AS transaction_count\nWHERE transaction_count >= 10\nMATCH (c)<-[:BELONGS_TO_CUSTOMER]-(d:Deposits)\nRETURN COUNT(d) AS deposit_count",
    "cypher_time_llm_gen": 2.2399742500056163,
    "cypher_answer": "[{'deposit_count': 28}]",
    "cypher_time_exec": 0.06844708299468039,
    "id": "ec8e0e4e-3f5a-42f6-b4a5-b985d1910379",
    "query": "How many deposits belong to customers who also made at least 10 transactions?"
  }
]
